// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/env0/terraform-provider-env0/client (interfaces: ApiClientInterface)
//
// Generated by this command:
//
//	mockgen -destination=api_client_mock.go -package=client . ApiClientInterface
//

// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockApiClientInterface is a mock of ApiClientInterface interface.
type MockApiClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockApiClientInterfaceMockRecorder
	isgomock struct{}
}

// MockApiClientInterfaceMockRecorder is the mock recorder for MockApiClientInterface.
type MockApiClientInterfaceMockRecorder struct {
	mock *MockApiClientInterface
}

// NewMockApiClientInterface creates a new mock instance.
func NewMockApiClientInterface(ctrl *gomock.Controller) *MockApiClientInterface {
	mock := &MockApiClientInterface{ctrl: ctrl}
	mock.recorder = &MockApiClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiClientInterface) EXPECT() *MockApiClientInterfaceMockRecorder {
	return m.recorder
}

// AgentValues mocks base method.
func (m *MockApiClientInterface) AgentValues(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentValues", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentValues indicates an expected call of AgentValues.
func (mr *MockApiClientInterfaceMockRecorder) AgentValues(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentValues", reflect.TypeOf((*MockApiClientInterface)(nil).AgentValues), id)
}

// Agents mocks base method.
func (m *MockApiClientInterface) Agents() ([]Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Agents")
	ret0, _ := ret[0].([]Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Agents indicates an expected call of Agents.
func (mr *MockApiClientInterfaceMockRecorder) Agents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Agents", reflect.TypeOf((*MockApiClientInterface)(nil).Agents))
}

// ApiKeyCreate mocks base method.
func (m *MockApiClientInterface) ApiKeyCreate(payload ApiKeyCreatePayload) (*ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApiKeyCreate", payload)
	ret0, _ := ret[0].(*ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApiKeyCreate indicates an expected call of ApiKeyCreate.
func (mr *MockApiClientInterfaceMockRecorder) ApiKeyCreate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApiKeyCreate", reflect.TypeOf((*MockApiClientInterface)(nil).ApiKeyCreate), payload)
}

// ApiKeyDelete mocks base method.
func (m *MockApiClientInterface) ApiKeyDelete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApiKeyDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApiKeyDelete indicates an expected call of ApiKeyDelete.
func (mr *MockApiClientInterfaceMockRecorder) ApiKeyDelete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApiKeyDelete", reflect.TypeOf((*MockApiClientInterface)(nil).ApiKeyDelete), id)
}

// ApiKeys mocks base method.
func (m *MockApiClientInterface) ApiKeys() ([]ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApiKeys")
	ret0, _ := ret[0].([]ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApiKeys indicates an expected call of ApiKeys.
func (mr *MockApiClientInterfaceMockRecorder) ApiKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApiKeys", reflect.TypeOf((*MockApiClientInterface)(nil).ApiKeys))
}

// ApprovalPolicies mocks base method.
func (m *MockApiClientInterface) ApprovalPolicies(name string) ([]ApprovalPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovalPolicies", name)
	ret0, _ := ret[0].([]ApprovalPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovalPolicies indicates an expected call of ApprovalPolicies.
func (mr *MockApiClientInterfaceMockRecorder) ApprovalPolicies(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovalPolicies", reflect.TypeOf((*MockApiClientInterface)(nil).ApprovalPolicies), name)
}

// ApprovalPolicyAssign mocks base method.
func (m *MockApiClientInterface) ApprovalPolicyAssign(assignment *ApprovalPolicyAssignment) (*ApprovalPolicyAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovalPolicyAssign", assignment)
	ret0, _ := ret[0].(*ApprovalPolicyAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovalPolicyAssign indicates an expected call of ApprovalPolicyAssign.
func (mr *MockApiClientInterfaceMockRecorder) ApprovalPolicyAssign(assignment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovalPolicyAssign", reflect.TypeOf((*MockApiClientInterface)(nil).ApprovalPolicyAssign), assignment)
}

// ApprovalPolicyByScope mocks base method.
func (m *MockApiClientInterface) ApprovalPolicyByScope(scope, scopeId string) ([]ApprovalPolicyByScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovalPolicyByScope", scope, scopeId)
	ret0, _ := ret[0].([]ApprovalPolicyByScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovalPolicyByScope indicates an expected call of ApprovalPolicyByScope.
func (mr *MockApiClientInterfaceMockRecorder) ApprovalPolicyByScope(scope, scopeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovalPolicyByScope", reflect.TypeOf((*MockApiClientInterface)(nil).ApprovalPolicyByScope), scope, scopeId)
}

// ApprovalPolicyCreate mocks base method.
func (m *MockApiClientInterface) ApprovalPolicyCreate(payload *ApprovalPolicyCreatePayload) (*ApprovalPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovalPolicyCreate", payload)
	ret0, _ := ret[0].(*ApprovalPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovalPolicyCreate indicates an expected call of ApprovalPolicyCreate.
func (mr *MockApiClientInterfaceMockRecorder) ApprovalPolicyCreate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovalPolicyCreate", reflect.TypeOf((*MockApiClientInterface)(nil).ApprovalPolicyCreate), payload)
}

// ApprovalPolicyUnassign mocks base method.
func (m *MockApiClientInterface) ApprovalPolicyUnassign(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovalPolicyUnassign", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApprovalPolicyUnassign indicates an expected call of ApprovalPolicyUnassign.
func (mr *MockApiClientInterfaceMockRecorder) ApprovalPolicyUnassign(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovalPolicyUnassign", reflect.TypeOf((*MockApiClientInterface)(nil).ApprovalPolicyUnassign), id)
}

// ApprovalPolicyUpdate mocks base method.
func (m *MockApiClientInterface) ApprovalPolicyUpdate(payload *ApprovalPolicyUpdatePayload) (*ApprovalPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovalPolicyUpdate", payload)
	ret0, _ := ret[0].(*ApprovalPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovalPolicyUpdate indicates an expected call of ApprovalPolicyUpdate.
func (mr *MockApiClientInterfaceMockRecorder) ApprovalPolicyUpdate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovalPolicyUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).ApprovalPolicyUpdate), payload)
}

// AssignAgentsToProjects mocks base method.
func (m *MockApiClientInterface) AssignAgentsToProjects(payload AssignProjectsAgentsAssignmentsPayload) (*ProjectsAgentsAssignments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignAgentsToProjects", payload)
	ret0, _ := ret[0].(*ProjectsAgentsAssignments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignAgentsToProjects indicates an expected call of AssignAgentsToProjects.
func (mr *MockApiClientInterfaceMockRecorder) AssignAgentsToProjects(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignAgentsToProjects", reflect.TypeOf((*MockApiClientInterface)(nil).AssignAgentsToProjects), payload)
}

// AssignCloudCredentialsToProject mocks base method.
func (m *MockApiClientInterface) AssignCloudCredentialsToProject(projectId, credentialId string) (CloudCredentialsProjectAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignCloudCredentialsToProject", projectId, credentialId)
	ret0, _ := ret[0].(CloudCredentialsProjectAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignCloudCredentialsToProject indicates an expected call of AssignCloudCredentialsToProject.
func (mr *MockApiClientInterfaceMockRecorder) AssignCloudCredentialsToProject(projectId, credentialId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignCloudCredentialsToProject", reflect.TypeOf((*MockApiClientInterface)(nil).AssignCloudCredentialsToProject), projectId, credentialId)
}

// AssignConfigurationSets mocks base method.
func (m *MockApiClientInterface) AssignConfigurationSets(scope, scopeId string, sets []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignConfigurationSets", scope, scopeId, sets)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignConfigurationSets indicates an expected call of AssignConfigurationSets.
func (mr *MockApiClientInterfaceMockRecorder) AssignConfigurationSets(scope, scopeId, sets any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignConfigurationSets", reflect.TypeOf((*MockApiClientInterface)(nil).AssignConfigurationSets), scope, scopeId, sets)
}

// AssignCostCredentialsToProject mocks base method.
func (m *MockApiClientInterface) AssignCostCredentialsToProject(projectId, credentialId string) (CostCredentialProjectAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignCostCredentialsToProject", projectId, credentialId)
	ret0, _ := ret[0].(CostCredentialProjectAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignCostCredentialsToProject indicates an expected call of AssignCostCredentialsToProject.
func (mr *MockApiClientInterfaceMockRecorder) AssignCostCredentialsToProject(projectId, credentialId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignCostCredentialsToProject", reflect.TypeOf((*MockApiClientInterface)(nil).AssignCostCredentialsToProject), projectId, credentialId)
}

// AssignTemplateToProject mocks base method.
func (m *MockApiClientInterface) AssignTemplateToProject(id string, payload TemplateAssignmentToProjectPayload) (Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignTemplateToProject", id, payload)
	ret0, _ := ret[0].(Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignTemplateToProject indicates an expected call of AssignTemplateToProject.
func (mr *MockApiClientInterfaceMockRecorder) AssignTemplateToProject(id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignTemplateToProject", reflect.TypeOf((*MockApiClientInterface)(nil).AssignTemplateToProject), id, payload)
}

// AssignUserRoleToEnvironment mocks base method.
func (m *MockApiClientInterface) AssignUserRoleToEnvironment(payload *AssignUserRoleToEnvironmentPayload) (*UserRoleEnvironmentAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignUserRoleToEnvironment", payload)
	ret0, _ := ret[0].(*UserRoleEnvironmentAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignUserRoleToEnvironment indicates an expected call of AssignUserRoleToEnvironment.
func (mr *MockApiClientInterfaceMockRecorder) AssignUserRoleToEnvironment(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUserRoleToEnvironment", reflect.TypeOf((*MockApiClientInterface)(nil).AssignUserRoleToEnvironment), payload)
}

// AssignUserToProject mocks base method.
func (m *MockApiClientInterface) AssignUserToProject(projectId string, payload *AssignUserToProjectPayload) (*UserProjectAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignUserToProject", projectId, payload)
	ret0, _ := ret[0].(*UserProjectAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignUserToProject indicates an expected call of AssignUserToProject.
func (mr *MockApiClientInterfaceMockRecorder) AssignUserToProject(projectId, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUserToProject", reflect.TypeOf((*MockApiClientInterface)(nil).AssignUserToProject), projectId, payload)
}

// CloudAccount mocks base method.
func (m *MockApiClientInterface) CloudAccount(id string) (*CloudAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudAccount", id)
	ret0, _ := ret[0].(*CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudAccount indicates an expected call of CloudAccount.
func (mr *MockApiClientInterfaceMockRecorder) CloudAccount(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudAccount", reflect.TypeOf((*MockApiClientInterface)(nil).CloudAccount), id)
}

// CloudAccountCreate mocks base method.
func (m *MockApiClientInterface) CloudAccountCreate(payload *CloudAccountCreatePayload) (*CloudAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudAccountCreate", payload)
	ret0, _ := ret[0].(*CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudAccountCreate indicates an expected call of CloudAccountCreate.
func (mr *MockApiClientInterfaceMockRecorder) CloudAccountCreate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudAccountCreate", reflect.TypeOf((*MockApiClientInterface)(nil).CloudAccountCreate), payload)
}

// CloudAccountDelete mocks base method.
func (m *MockApiClientInterface) CloudAccountDelete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudAccountDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloudAccountDelete indicates an expected call of CloudAccountDelete.
func (mr *MockApiClientInterfaceMockRecorder) CloudAccountDelete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudAccountDelete", reflect.TypeOf((*MockApiClientInterface)(nil).CloudAccountDelete), id)
}

// CloudAccountUpdate mocks base method.
func (m *MockApiClientInterface) CloudAccountUpdate(id string, payload *CloudAccountUpdatePayload) (*CloudAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudAccountUpdate", id, payload)
	ret0, _ := ret[0].(*CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudAccountUpdate indicates an expected call of CloudAccountUpdate.
func (mr *MockApiClientInterfaceMockRecorder) CloudAccountUpdate(id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudAccountUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).CloudAccountUpdate), id, payload)
}

// CloudAccounts mocks base method.
func (m *MockApiClientInterface) CloudAccounts() ([]CloudAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudAccounts")
	ret0, _ := ret[0].([]CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudAccounts indicates an expected call of CloudAccounts.
func (mr *MockApiClientInterfaceMockRecorder) CloudAccounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudAccounts", reflect.TypeOf((*MockApiClientInterface)(nil).CloudAccounts))
}

// CloudCredentialIdsInProject mocks base method.
func (m *MockApiClientInterface) CloudCredentialIdsInProject(projectId string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudCredentialIdsInProject", projectId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudCredentialIdsInProject indicates an expected call of CloudCredentialIdsInProject.
func (mr *MockApiClientInterfaceMockRecorder) CloudCredentialIdsInProject(projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudCredentialIdsInProject", reflect.TypeOf((*MockApiClientInterface)(nil).CloudCredentialIdsInProject), projectId)
}

// CloudCredentials mocks base method.
func (m *MockApiClientInterface) CloudCredentials(id string) (Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudCredentials", id)
	ret0, _ := ret[0].(Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudCredentials indicates an expected call of CloudCredentials.
func (mr *MockApiClientInterfaceMockRecorder) CloudCredentials(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudCredentials", reflect.TypeOf((*MockApiClientInterface)(nil).CloudCredentials), id)
}

// CloudCredentialsDelete mocks base method.
func (m *MockApiClientInterface) CloudCredentialsDelete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudCredentialsDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloudCredentialsDelete indicates an expected call of CloudCredentialsDelete.
func (mr *MockApiClientInterfaceMockRecorder) CloudCredentialsDelete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudCredentialsDelete", reflect.TypeOf((*MockApiClientInterface)(nil).CloudCredentialsDelete), id)
}

// CloudCredentialsList mocks base method.
func (m *MockApiClientInterface) CloudCredentialsList() ([]Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudCredentialsList")
	ret0, _ := ret[0].([]Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudCredentialsList indicates an expected call of CloudCredentialsList.
func (mr *MockApiClientInterfaceMockRecorder) CloudCredentialsList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudCredentialsList", reflect.TypeOf((*MockApiClientInterface)(nil).CloudCredentialsList))
}

// ConfigurationSet mocks base method.
func (m *MockApiClientInterface) ConfigurationSet(id string) (*ConfigurationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationSet", id)
	ret0, _ := ret[0].(*ConfigurationSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationSet indicates an expected call of ConfigurationSet.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationSet(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationSet", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationSet), id)
}

// ConfigurationSetCreate mocks base method.
func (m *MockApiClientInterface) ConfigurationSetCreate(payload *CreateConfigurationSetPayload) (*ConfigurationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationSetCreate", payload)
	ret0, _ := ret[0].(*ConfigurationSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationSetCreate indicates an expected call of ConfigurationSetCreate.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationSetCreate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationSetCreate", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationSetCreate), payload)
}

// ConfigurationSetDelete mocks base method.
func (m *MockApiClientInterface) ConfigurationSetDelete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationSetDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigurationSetDelete indicates an expected call of ConfigurationSetDelete.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationSetDelete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationSetDelete", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationSetDelete), id)
}

// ConfigurationSetUpdate mocks base method.
func (m *MockApiClientInterface) ConfigurationSetUpdate(id string, payload *UpdateConfigurationSetPayload) (*ConfigurationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationSetUpdate", id, payload)
	ret0, _ := ret[0].(*ConfigurationSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationSetUpdate indicates an expected call of ConfigurationSetUpdate.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationSetUpdate(id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationSetUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationSetUpdate), id, payload)
}

// ConfigurationSets mocks base method.
func (m *MockApiClientInterface) ConfigurationSets(scope, scopeId string) ([]ConfigurationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationSets", scope, scopeId)
	ret0, _ := ret[0].([]ConfigurationSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationSets indicates an expected call of ConfigurationSets.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationSets(scope, scopeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationSets", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationSets), scope, scopeId)
}

// ConfigurationSetsAssignments mocks base method.
func (m *MockApiClientInterface) ConfigurationSetsAssignments(scope, scopeId string) ([]ConfigurationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationSetsAssignments", scope, scopeId)
	ret0, _ := ret[0].([]ConfigurationSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationSetsAssignments indicates an expected call of ConfigurationSetsAssignments.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationSetsAssignments(scope, scopeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationSetsAssignments", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationSetsAssignments), scope, scopeId)
}

// ConfigurationVariableCreate mocks base method.
func (m *MockApiClientInterface) ConfigurationVariableCreate(params ConfigurationVariableCreateParams) (ConfigurationVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationVariableCreate", params)
	ret0, _ := ret[0].(ConfigurationVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationVariableCreate indicates an expected call of ConfigurationVariableCreate.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationVariableCreate(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationVariableCreate", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationVariableCreate), params)
}

// ConfigurationVariableDelete mocks base method.
func (m *MockApiClientInterface) ConfigurationVariableDelete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationVariableDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigurationVariableDelete indicates an expected call of ConfigurationVariableDelete.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationVariableDelete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationVariableDelete", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationVariableDelete), id)
}

// ConfigurationVariableUpdate mocks base method.
func (m *MockApiClientInterface) ConfigurationVariableUpdate(params ConfigurationVariableUpdateParams) (ConfigurationVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationVariableUpdate", params)
	ret0, _ := ret[0].(ConfigurationVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationVariableUpdate indicates an expected call of ConfigurationVariableUpdate.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationVariableUpdate(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationVariableUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationVariableUpdate), params)
}

// ConfigurationVariablesById mocks base method.
func (m *MockApiClientInterface) ConfigurationVariablesById(id string) (ConfigurationVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationVariablesById", id)
	ret0, _ := ret[0].(ConfigurationVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationVariablesById indicates an expected call of ConfigurationVariablesById.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationVariablesById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationVariablesById", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationVariablesById), id)
}

// ConfigurationVariablesByScope mocks base method.
func (m *MockApiClientInterface) ConfigurationVariablesByScope(scope Scope, scopeId string) ([]ConfigurationVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationVariablesByScope", scope, scopeId)
	ret0, _ := ret[0].([]ConfigurationVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationVariablesByScope indicates an expected call of ConfigurationVariablesByScope.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationVariablesByScope(scope, scopeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationVariablesByScope", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationVariablesByScope), scope, scopeId)
}

// ConfigurationVariablesBySetId mocks base method.
func (m *MockApiClientInterface) ConfigurationVariablesBySetId(setId string) ([]ConfigurationVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationVariablesBySetId", setId)
	ret0, _ := ret[0].([]ConfigurationVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationVariablesBySetId indicates an expected call of ConfigurationVariablesBySetId.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationVariablesBySetId(setId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationVariablesBySetId", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationVariablesBySetId), setId)
}

// CostCredentialIdsInProject mocks base method.
func (m *MockApiClientInterface) CostCredentialIdsInProject(projectId string) ([]CostCredentialProjectAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CostCredentialIdsInProject", projectId)
	ret0, _ := ret[0].([]CostCredentialProjectAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CostCredentialIdsInProject indicates an expected call of CostCredentialIdsInProject.
func (mr *MockApiClientInterfaceMockRecorder) CostCredentialIdsInProject(projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CostCredentialIdsInProject", reflect.TypeOf((*MockApiClientInterface)(nil).CostCredentialIdsInProject), projectId)
}

// CredentialsCreate mocks base method.
func (m *MockApiClientInterface) CredentialsCreate(request CredentialCreatePayload) (Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredentialsCreate", request)
	ret0, _ := ret[0].(Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CredentialsCreate indicates an expected call of CredentialsCreate.
func (mr *MockApiClientInterfaceMockRecorder) CredentialsCreate(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredentialsCreate", reflect.TypeOf((*MockApiClientInterface)(nil).CredentialsCreate), request)
}

// CredentialsUpdate mocks base method.
func (m *MockApiClientInterface) CredentialsUpdate(id string, request CredentialCreatePayload) (Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredentialsUpdate", id, request)
	ret0, _ := ret[0].(Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CredentialsUpdate indicates an expected call of CredentialsUpdate.
func (mr *MockApiClientInterfaceMockRecorder) CredentialsUpdate(id, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredentialsUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).CredentialsUpdate), id, request)
}

// CustomFlow mocks base method.
func (m *MockApiClientInterface) CustomFlow(id string) (*CustomFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomFlow", id)
	ret0, _ := ret[0].(*CustomFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomFlow indicates an expected call of CustomFlow.
func (mr *MockApiClientInterfaceMockRecorder) CustomFlow(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomFlow", reflect.TypeOf((*MockApiClientInterface)(nil).CustomFlow), id)
}

// CustomFlowAssign mocks base method.
func (m *MockApiClientInterface) CustomFlowAssign(assignments []CustomFlowAssignment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomFlowAssign", assignments)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomFlowAssign indicates an expected call of CustomFlowAssign.
func (mr *MockApiClientInterfaceMockRecorder) CustomFlowAssign(assignments any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomFlowAssign", reflect.TypeOf((*MockApiClientInterface)(nil).CustomFlowAssign), assignments)
}

// CustomFlowCreate mocks base method.
func (m *MockApiClientInterface) CustomFlowCreate(payload CustomFlowCreatePayload) (*CustomFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomFlowCreate", payload)
	ret0, _ := ret[0].(*CustomFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomFlowCreate indicates an expected call of CustomFlowCreate.
func (mr *MockApiClientInterfaceMockRecorder) CustomFlowCreate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomFlowCreate", reflect.TypeOf((*MockApiClientInterface)(nil).CustomFlowCreate), payload)
}

// CustomFlowDelete mocks base method.
func (m *MockApiClientInterface) CustomFlowDelete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomFlowDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomFlowDelete indicates an expected call of CustomFlowDelete.
func (mr *MockApiClientInterfaceMockRecorder) CustomFlowDelete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomFlowDelete", reflect.TypeOf((*MockApiClientInterface)(nil).CustomFlowDelete), id)
}

// CustomFlowGetAssignments mocks base method.
func (m *MockApiClientInterface) CustomFlowGetAssignments(assignments []CustomFlowAssignment) ([]CustomFlowAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomFlowGetAssignments", assignments)
	ret0, _ := ret[0].([]CustomFlowAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomFlowGetAssignments indicates an expected call of CustomFlowGetAssignments.
func (mr *MockApiClientInterfaceMockRecorder) CustomFlowGetAssignments(assignments any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomFlowGetAssignments", reflect.TypeOf((*MockApiClientInterface)(nil).CustomFlowGetAssignments), assignments)
}

// CustomFlowUnassign mocks base method.
func (m *MockApiClientInterface) CustomFlowUnassign(assignments []CustomFlowAssignment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomFlowUnassign", assignments)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomFlowUnassign indicates an expected call of CustomFlowUnassign.
func (mr *MockApiClientInterfaceMockRecorder) CustomFlowUnassign(assignments any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomFlowUnassign", reflect.TypeOf((*MockApiClientInterface)(nil).CustomFlowUnassign), assignments)
}

// CustomFlowUpdate mocks base method.
func (m *MockApiClientInterface) CustomFlowUpdate(id string, payload CustomFlowCreatePayload) (*CustomFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomFlowUpdate", id, payload)
	ret0, _ := ret[0].(*CustomFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomFlowUpdate indicates an expected call of CustomFlowUpdate.
func (mr *MockApiClientInterfaceMockRecorder) CustomFlowUpdate(id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomFlowUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).CustomFlowUpdate), id, payload)
}

// CustomFlows mocks base method.
func (m *MockApiClientInterface) CustomFlows(name string) ([]CustomFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomFlows", name)
	ret0, _ := ret[0].([]CustomFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomFlows indicates an expected call of CustomFlows.
func (mr *MockApiClientInterfaceMockRecorder) CustomFlows(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomFlows", reflect.TypeOf((*MockApiClientInterface)(nil).CustomFlows), name)
}

// DeleteEnvironmentDiscovery mocks base method.
func (m *MockApiClientInterface) DeleteEnvironmentDiscovery(projectId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentDiscovery", projectId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvironmentDiscovery indicates an expected call of DeleteEnvironmentDiscovery.
func (mr *MockApiClientInterfaceMockRecorder) DeleteEnvironmentDiscovery(projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentDiscovery", reflect.TypeOf((*MockApiClientInterface)(nil).DeleteEnvironmentDiscovery), projectId)
}

// Environment mocks base method.
func (m *MockApiClientInterface) Environment(id string) (Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environment", id)
	ret0, _ := ret[0].(Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Environment indicates an expected call of Environment.
func (mr *MockApiClientInterfaceMockRecorder) Environment(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environment", reflect.TypeOf((*MockApiClientInterface)(nil).Environment), id)
}

// EnvironmentCreate mocks base method.
func (m *MockApiClientInterface) EnvironmentCreate(payload EnvironmentCreate) (Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentCreate", payload)
	ret0, _ := ret[0].(Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentCreate indicates an expected call of EnvironmentCreate.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentCreate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentCreate", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentCreate), payload)
}

// EnvironmentCreateWithoutTemplate mocks base method.
func (m *MockApiClientInterface) EnvironmentCreateWithoutTemplate(payload EnvironmentCreateWithoutTemplate) (Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentCreateWithoutTemplate", payload)
	ret0, _ := ret[0].(Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentCreateWithoutTemplate indicates an expected call of EnvironmentCreateWithoutTemplate.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentCreateWithoutTemplate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentCreateWithoutTemplate", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentCreateWithoutTemplate), payload)
}

// EnvironmentDeploy mocks base method.
func (m *MockApiClientInterface) EnvironmentDeploy(id string, payload DeployRequest) (EnvironmentDeployResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentDeploy", id, payload)
	ret0, _ := ret[0].(EnvironmentDeployResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentDeploy indicates an expected call of EnvironmentDeploy.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentDeploy(id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentDeploy", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentDeploy), id, payload)
}

// EnvironmentDeploymentLog mocks base method.
func (m *MockApiClientInterface) EnvironmentDeploymentLog(id string) (*DeploymentLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentDeploymentLog", id)
	ret0, _ := ret[0].(*DeploymentLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentDeploymentLog indicates an expected call of EnvironmentDeploymentLog.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentDeploymentLog(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentDeploymentLog", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentDeploymentLog), id)
}

// EnvironmentDestroy mocks base method.
func (m *MockApiClientInterface) EnvironmentDestroy(id string) (*EnvironmentDestroyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentDestroy", id)
	ret0, _ := ret[0].(*EnvironmentDestroyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentDestroy indicates an expected call of EnvironmentDestroy.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentDestroy(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentDestroy", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentDestroy), id)
}

// EnvironmentDriftDetection mocks base method.
func (m *MockApiClientInterface) EnvironmentDriftDetection(environmentId string) (EnvironmentSchedulingExpression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentDriftDetection", environmentId)
	ret0, _ := ret[0].(EnvironmentSchedulingExpression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentDriftDetection indicates an expected call of EnvironmentDriftDetection.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentDriftDetection(environmentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentDriftDetection", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentDriftDetection), environmentId)
}

// EnvironmentMarkAsArchived mocks base method.
func (m *MockApiClientInterface) EnvironmentMarkAsArchived(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentMarkAsArchived", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentMarkAsArchived indicates an expected call of EnvironmentMarkAsArchived.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentMarkAsArchived(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentMarkAsArchived", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentMarkAsArchived), id)
}

// EnvironmentMove mocks base method.
func (m *MockApiClientInterface) EnvironmentMove(id, projectId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentMove", id, projectId)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentMove indicates an expected call of EnvironmentMove.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentMove(id, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentMove", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentMove), id, projectId)
}

// EnvironmentScheduling mocks base method.
func (m *MockApiClientInterface) EnvironmentScheduling(environmentId string) (EnvironmentScheduling, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentScheduling", environmentId)
	ret0, _ := ret[0].(EnvironmentScheduling)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentScheduling indicates an expected call of EnvironmentScheduling.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentScheduling(environmentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentScheduling", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentScheduling), environmentId)
}

// EnvironmentSchedulingDelete mocks base method.
func (m *MockApiClientInterface) EnvironmentSchedulingDelete(environmentId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentSchedulingDelete", environmentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentSchedulingDelete indicates an expected call of EnvironmentSchedulingDelete.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentSchedulingDelete(environmentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentSchedulingDelete", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentSchedulingDelete), environmentId)
}

// EnvironmentSchedulingUpdate mocks base method.
func (m *MockApiClientInterface) EnvironmentSchedulingUpdate(environmentId string, payload EnvironmentScheduling) (EnvironmentScheduling, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentSchedulingUpdate", environmentId, payload)
	ret0, _ := ret[0].(EnvironmentScheduling)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentSchedulingUpdate indicates an expected call of EnvironmentSchedulingUpdate.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentSchedulingUpdate(environmentId, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentSchedulingUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentSchedulingUpdate), environmentId, payload)
}

// EnvironmentStopDriftDetection mocks base method.
func (m *MockApiClientInterface) EnvironmentStopDriftDetection(environmentId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentStopDriftDetection", environmentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentStopDriftDetection indicates an expected call of EnvironmentStopDriftDetection.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentStopDriftDetection(environmentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentStopDriftDetection", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentStopDriftDetection), environmentId)
}

// EnvironmentUpdate mocks base method.
func (m *MockApiClientInterface) EnvironmentUpdate(id string, payload EnvironmentUpdate) (Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentUpdate", id, payload)
	ret0, _ := ret[0].(Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentUpdate indicates an expected call of EnvironmentUpdate.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentUpdate(id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentUpdate), id, payload)
}

// EnvironmentUpdateDriftDetection mocks base method.
func (m *MockApiClientInterface) EnvironmentUpdateDriftDetection(environmentId string, payload EnvironmentSchedulingExpression) (EnvironmentSchedulingExpression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentUpdateDriftDetection", environmentId, payload)
	ret0, _ := ret[0].(EnvironmentSchedulingExpression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentUpdateDriftDetection indicates an expected call of EnvironmentUpdateDriftDetection.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentUpdateDriftDetection(environmentId, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentUpdateDriftDetection", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentUpdateDriftDetection), environmentId, payload)
}

// EnvironmentUpdateTTL mocks base method.
func (m *MockApiClientInterface) EnvironmentUpdateTTL(id string, payload TTL) (Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentUpdateTTL", id, payload)
	ret0, _ := ret[0].(Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentUpdateTTL indicates an expected call of EnvironmentUpdateTTL.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentUpdateTTL(id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentUpdateTTL", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentUpdateTTL), id, payload)
}

// EnvironmentsByName mocks base method.
func (m *MockApiClientInterface) EnvironmentsByName(name string) ([]Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentsByName", name)
	ret0, _ := ret[0].([]Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentsByName indicates an expected call of EnvironmentsByName.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentsByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentsByName", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentsByName), name)
}

// GetEnvironmentDiscovery mocks base method.
func (m *MockApiClientInterface) GetEnvironmentDiscovery(projectId string) (*EnvironmentDiscoveryPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentDiscovery", projectId)
	ret0, _ := ret[0].(*EnvironmentDiscoveryPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentDiscovery indicates an expected call of GetEnvironmentDiscovery.
func (mr *MockApiClientInterfaceMockRecorder) GetEnvironmentDiscovery(projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentDiscovery", reflect.TypeOf((*MockApiClientInterface)(nil).GetEnvironmentDiscovery), projectId)
}

// GitToken mocks base method.
func (m *MockApiClientInterface) GitToken(id string) (*GitToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitToken", id)
	ret0, _ := ret[0].(*GitToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GitToken indicates an expected call of GitToken.
func (mr *MockApiClientInterfaceMockRecorder) GitToken(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitToken", reflect.TypeOf((*MockApiClientInterface)(nil).GitToken), id)
}

// GitTokenCreate mocks base method.
func (m *MockApiClientInterface) GitTokenCreate(payload GitTokenCreatePayload) (*GitToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitTokenCreate", payload)
	ret0, _ := ret[0].(*GitToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GitTokenCreate indicates an expected call of GitTokenCreate.
func (mr *MockApiClientInterfaceMockRecorder) GitTokenCreate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitTokenCreate", reflect.TypeOf((*MockApiClientInterface)(nil).GitTokenCreate), payload)
}

// GitTokenDelete mocks base method.
func (m *MockApiClientInterface) GitTokenDelete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitTokenDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GitTokenDelete indicates an expected call of GitTokenDelete.
func (mr *MockApiClientInterfaceMockRecorder) GitTokenDelete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitTokenDelete", reflect.TypeOf((*MockApiClientInterface)(nil).GitTokenDelete), id)
}

// GitTokens mocks base method.
func (m *MockApiClientInterface) GitTokens() ([]GitToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitTokens")
	ret0, _ := ret[0].([]GitToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GitTokens indicates an expected call of GitTokens.
func (mr *MockApiClientInterfaceMockRecorder) GitTokens() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitTokens", reflect.TypeOf((*MockApiClientInterface)(nil).GitTokens))
}

// GpgKeyCreate mocks base method.
func (m *MockApiClientInterface) GpgKeyCreate(payload *GpgKeyCreatePayload) (*GpgKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpgKeyCreate", payload)
	ret0, _ := ret[0].(*GpgKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GpgKeyCreate indicates an expected call of GpgKeyCreate.
func (mr *MockApiClientInterfaceMockRecorder) GpgKeyCreate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpgKeyCreate", reflect.TypeOf((*MockApiClientInterface)(nil).GpgKeyCreate), payload)
}

// GpgKeyDelete mocks base method.
func (m *MockApiClientInterface) GpgKeyDelete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpgKeyDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GpgKeyDelete indicates an expected call of GpgKeyDelete.
func (mr *MockApiClientInterfaceMockRecorder) GpgKeyDelete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpgKeyDelete", reflect.TypeOf((*MockApiClientInterface)(nil).GpgKeyDelete), id)
}

// GpgKeys mocks base method.
func (m *MockApiClientInterface) GpgKeys() ([]GpgKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpgKeys")
	ret0, _ := ret[0].([]GpgKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GpgKeys indicates an expected call of GpgKeys.
func (mr *MockApiClientInterfaceMockRecorder) GpgKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpgKeys", reflect.TypeOf((*MockApiClientInterface)(nil).GpgKeys))
}

// KubernetesCredentialsCreate mocks base method.
func (m *MockApiClientInterface) KubernetesCredentialsCreate(payload *KubernetesCredentialsCreatePayload) (*Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubernetesCredentialsCreate", payload)
	ret0, _ := ret[0].(*Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KubernetesCredentialsCreate indicates an expected call of KubernetesCredentialsCreate.
func (mr *MockApiClientInterfaceMockRecorder) KubernetesCredentialsCreate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubernetesCredentialsCreate", reflect.TypeOf((*MockApiClientInterface)(nil).KubernetesCredentialsCreate), payload)
}

// KubernetesCredentialsUpdate mocks base method.
func (m *MockApiClientInterface) KubernetesCredentialsUpdate(id string, payload *KubernetesCredentialsUpdatePayload) (*Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubernetesCredentialsUpdate", id, payload)
	ret0, _ := ret[0].(*Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KubernetesCredentialsUpdate indicates an expected call of KubernetesCredentialsUpdate.
func (mr *MockApiClientInterfaceMockRecorder) KubernetesCredentialsUpdate(id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubernetesCredentialsUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).KubernetesCredentialsUpdate), id, payload)
}

// Module mocks base method.
func (m *MockApiClientInterface) Module(id string) (*Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Module", id)
	ret0, _ := ret[0].(*Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Module indicates an expected call of Module.
func (mr *MockApiClientInterfaceMockRecorder) Module(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Module", reflect.TypeOf((*MockApiClientInterface)(nil).Module), id)
}

// ModuleCreate mocks base method.
func (m *MockApiClientInterface) ModuleCreate(payload ModuleCreatePayload) (*Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModuleCreate", payload)
	ret0, _ := ret[0].(*Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModuleCreate indicates an expected call of ModuleCreate.
func (mr *MockApiClientInterfaceMockRecorder) ModuleCreate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleCreate", reflect.TypeOf((*MockApiClientInterface)(nil).ModuleCreate), payload)
}

// ModuleDelete mocks base method.
func (m *MockApiClientInterface) ModuleDelete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModuleDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModuleDelete indicates an expected call of ModuleDelete.
func (mr *MockApiClientInterfaceMockRecorder) ModuleDelete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleDelete", reflect.TypeOf((*MockApiClientInterface)(nil).ModuleDelete), id)
}

// ModuleTestingProject mocks base method.
func (m *MockApiClientInterface) ModuleTestingProject() (*ModuleTestingProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModuleTestingProject")
	ret0, _ := ret[0].(*ModuleTestingProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModuleTestingProject indicates an expected call of ModuleTestingProject.
func (mr *MockApiClientInterfaceMockRecorder) ModuleTestingProject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleTestingProject", reflect.TypeOf((*MockApiClientInterface)(nil).ModuleTestingProject))
}

// ModuleUpdate mocks base method.
func (m *MockApiClientInterface) ModuleUpdate(id string, payload ModuleUpdatePayload) (*Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModuleUpdate", id, payload)
	ret0, _ := ret[0].(*Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModuleUpdate indicates an expected call of ModuleUpdate.
func (mr *MockApiClientInterfaceMockRecorder) ModuleUpdate(id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).ModuleUpdate), id, payload)
}

// Modules mocks base method.
func (m *MockApiClientInterface) Modules() ([]Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Modules")
	ret0, _ := ret[0].([]Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Modules indicates an expected call of Modules.
func (mr *MockApiClientInterfaceMockRecorder) Modules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modules", reflect.TypeOf((*MockApiClientInterface)(nil).Modules))
}

// NotificationCreate mocks base method.
func (m *MockApiClientInterface) NotificationCreate(payload NotificationCreatePayload) (*Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationCreate", payload)
	ret0, _ := ret[0].(*Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotificationCreate indicates an expected call of NotificationCreate.
func (mr *MockApiClientInterfaceMockRecorder) NotificationCreate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationCreate", reflect.TypeOf((*MockApiClientInterface)(nil).NotificationCreate), payload)
}

// NotificationDelete mocks base method.
func (m *MockApiClientInterface) NotificationDelete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotificationDelete indicates an expected call of NotificationDelete.
func (mr *MockApiClientInterfaceMockRecorder) NotificationDelete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationDelete", reflect.TypeOf((*MockApiClientInterface)(nil).NotificationDelete), id)
}

// NotificationProjectAssignmentUpdate mocks base method.
func (m *MockApiClientInterface) NotificationProjectAssignmentUpdate(projectId, endpointId string, payload NotificationProjectAssignmentUpdatePayload) (*NotificationProjectAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationProjectAssignmentUpdate", projectId, endpointId, payload)
	ret0, _ := ret[0].(*NotificationProjectAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotificationProjectAssignmentUpdate indicates an expected call of NotificationProjectAssignmentUpdate.
func (mr *MockApiClientInterfaceMockRecorder) NotificationProjectAssignmentUpdate(projectId, endpointId, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationProjectAssignmentUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).NotificationProjectAssignmentUpdate), projectId, endpointId, payload)
}

// NotificationProjectAssignments mocks base method.
func (m *MockApiClientInterface) NotificationProjectAssignments(projectId string) ([]NotificationProjectAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationProjectAssignments", projectId)
	ret0, _ := ret[0].([]NotificationProjectAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotificationProjectAssignments indicates an expected call of NotificationProjectAssignments.
func (mr *MockApiClientInterfaceMockRecorder) NotificationProjectAssignments(projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationProjectAssignments", reflect.TypeOf((*MockApiClientInterface)(nil).NotificationProjectAssignments), projectId)
}

// NotificationUpdate mocks base method.
func (m *MockApiClientInterface) NotificationUpdate(id string, payload NotificationUpdatePayload) (*Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationUpdate", id, payload)
	ret0, _ := ret[0].(*Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotificationUpdate indicates an expected call of NotificationUpdate.
func (mr *MockApiClientInterfaceMockRecorder) NotificationUpdate(id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).NotificationUpdate), id, payload)
}

// Notifications mocks base method.
func (m *MockApiClientInterface) Notifications() ([]Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notifications")
	ret0, _ := ret[0].([]Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Notifications indicates an expected call of Notifications.
func (mr *MockApiClientInterfaceMockRecorder) Notifications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notifications", reflect.TypeOf((*MockApiClientInterface)(nil).Notifications))
}

// OidcSub mocks base method.
func (m *MockApiClientInterface) OidcSub() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OidcSub")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OidcSub indicates an expected call of OidcSub.
func (mr *MockApiClientInterfaceMockRecorder) OidcSub() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OidcSub", reflect.TypeOf((*MockApiClientInterface)(nil).OidcSub))
}

// Organization mocks base method.
func (m *MockApiClientInterface) Organization() (Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Organization")
	ret0, _ := ret[0].(Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Organization indicates an expected call of Organization.
func (mr *MockApiClientInterfaceMockRecorder) Organization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Organization", reflect.TypeOf((*MockApiClientInterface)(nil).Organization))
}

// OrganizationId mocks base method.
func (m *MockApiClientInterface) OrganizationId() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationId")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationId indicates an expected call of OrganizationId.
func (mr *MockApiClientInterfaceMockRecorder) OrganizationId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationId", reflect.TypeOf((*MockApiClientInterface)(nil).OrganizationId))
}

// OrganizationPolicyUpdate mocks base method.
func (m *MockApiClientInterface) OrganizationPolicyUpdate(arg0 OrganizationPolicyUpdatePayload) (*Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationPolicyUpdate", arg0)
	ret0, _ := ret[0].(*Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationPolicyUpdate indicates an expected call of OrganizationPolicyUpdate.
func (mr *MockApiClientInterfaceMockRecorder) OrganizationPolicyUpdate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationPolicyUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).OrganizationPolicyUpdate), arg0)
}

// OrganizationUserUpdateRole mocks base method.
func (m *MockApiClientInterface) OrganizationUserUpdateRole(userId, roleId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationUserUpdateRole", userId, roleId)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrganizationUserUpdateRole indicates an expected call of OrganizationUserUpdateRole.
func (mr *MockApiClientInterfaceMockRecorder) OrganizationUserUpdateRole(userId, roleId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationUserUpdateRole", reflect.TypeOf((*MockApiClientInterface)(nil).OrganizationUserUpdateRole), userId, roleId)
}

// Policy mocks base method.
func (m *MockApiClientInterface) Policy(projectId string) (Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Policy", projectId)
	ret0, _ := ret[0].(Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Policy indicates an expected call of Policy.
func (mr *MockApiClientInterfaceMockRecorder) Policy(projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Policy", reflect.TypeOf((*MockApiClientInterface)(nil).Policy), projectId)
}

// PolicyUpdate mocks base method.
func (m *MockApiClientInterface) PolicyUpdate(payload PolicyUpdatePayload) (Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PolicyUpdate", payload)
	ret0, _ := ret[0].(Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PolicyUpdate indicates an expected call of PolicyUpdate.
func (mr *MockApiClientInterfaceMockRecorder) PolicyUpdate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PolicyUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).PolicyUpdate), payload)
}

// Project mocks base method.
func (m *MockApiClientInterface) Project(id string) (Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Project", id)
	ret0, _ := ret[0].(Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Project indicates an expected call of Project.
func (mr *MockApiClientInterfaceMockRecorder) Project(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Project", reflect.TypeOf((*MockApiClientInterface)(nil).Project), id)
}

// ProjectBudget mocks base method.
func (m *MockApiClientInterface) ProjectBudget(projectId string) (*ProjectBudget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectBudget", projectId)
	ret0, _ := ret[0].(*ProjectBudget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectBudget indicates an expected call of ProjectBudget.
func (mr *MockApiClientInterfaceMockRecorder) ProjectBudget(projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectBudget", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectBudget), projectId)
}

// ProjectBudgetDelete mocks base method.
func (m *MockApiClientInterface) ProjectBudgetDelete(projectId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectBudgetDelete", projectId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectBudgetDelete indicates an expected call of ProjectBudgetDelete.
func (mr *MockApiClientInterfaceMockRecorder) ProjectBudgetDelete(projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectBudgetDelete", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectBudgetDelete), projectId)
}

// ProjectBudgetUpdate mocks base method.
func (m *MockApiClientInterface) ProjectBudgetUpdate(projectId string, payload *ProjectBudgetUpdatePayload) (*ProjectBudget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectBudgetUpdate", projectId, payload)
	ret0, _ := ret[0].(*ProjectBudget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectBudgetUpdate indicates an expected call of ProjectBudgetUpdate.
func (mr *MockApiClientInterfaceMockRecorder) ProjectBudgetUpdate(projectId, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectBudgetUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectBudgetUpdate), projectId, payload)
}

// ProjectCreate mocks base method.
func (m *MockApiClientInterface) ProjectCreate(payload ProjectCreatePayload) (Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectCreate", payload)
	ret0, _ := ret[0].(Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectCreate indicates an expected call of ProjectCreate.
func (mr *MockApiClientInterfaceMockRecorder) ProjectCreate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectCreate", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectCreate), payload)
}

// ProjectDelete mocks base method.
func (m *MockApiClientInterface) ProjectDelete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectDelete indicates an expected call of ProjectDelete.
func (mr *MockApiClientInterfaceMockRecorder) ProjectDelete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectDelete", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectDelete), id)
}

// ProjectEnvironments mocks base method.
func (m *MockApiClientInterface) ProjectEnvironments(projectId string) ([]Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectEnvironments", projectId)
	ret0, _ := ret[0].([]Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectEnvironments indicates an expected call of ProjectEnvironments.
func (mr *MockApiClientInterfaceMockRecorder) ProjectEnvironments(projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectEnvironments", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectEnvironments), projectId)
}

// ProjectMove mocks base method.
func (m *MockApiClientInterface) ProjectMove(id, targetProjectId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectMove", id, targetProjectId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectMove indicates an expected call of ProjectMove.
func (mr *MockApiClientInterfaceMockRecorder) ProjectMove(id, targetProjectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectMove", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectMove), id, targetProjectId)
}

// ProjectUpdate mocks base method.
func (m *MockApiClientInterface) ProjectUpdate(id string, payload ProjectUpdatePayload) (Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectUpdate", id, payload)
	ret0, _ := ret[0].(Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectUpdate indicates an expected call of ProjectUpdate.
func (mr *MockApiClientInterfaceMockRecorder) ProjectUpdate(id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectUpdate), id, payload)
}

// Projects mocks base method.
func (m *MockApiClientInterface) Projects() ([]Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Projects")
	ret0, _ := ret[0].([]Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Projects indicates an expected call of Projects.
func (mr *MockApiClientInterfaceMockRecorder) Projects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Projects", reflect.TypeOf((*MockApiClientInterface)(nil).Projects))
}

// ProjectsAgentsAssignments mocks base method.
func (m *MockApiClientInterface) ProjectsAgentsAssignments() (*ProjectsAgentsAssignments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectsAgentsAssignments")
	ret0, _ := ret[0].(*ProjectsAgentsAssignments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectsAgentsAssignments indicates an expected call of ProjectsAgentsAssignments.
func (mr *MockApiClientInterfaceMockRecorder) ProjectsAgentsAssignments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectsAgentsAssignments", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectsAgentsAssignments))
}

// Provider mocks base method.
func (m *MockApiClientInterface) Provider(providerId string) (*Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provider", providerId)
	ret0, _ := ret[0].(*Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Provider indicates an expected call of Provider.
func (mr *MockApiClientInterfaceMockRecorder) Provider(providerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provider", reflect.TypeOf((*MockApiClientInterface)(nil).Provider), providerId)
}

// ProviderCreate mocks base method.
func (m *MockApiClientInterface) ProviderCreate(payload ProviderCreatePayload) (*Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderCreate", payload)
	ret0, _ := ret[0].(*Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderCreate indicates an expected call of ProviderCreate.
func (mr *MockApiClientInterfaceMockRecorder) ProviderCreate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderCreate", reflect.TypeOf((*MockApiClientInterface)(nil).ProviderCreate), payload)
}

// ProviderDelete mocks base method.
func (m *MockApiClientInterface) ProviderDelete(providerId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderDelete", providerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProviderDelete indicates an expected call of ProviderDelete.
func (mr *MockApiClientInterfaceMockRecorder) ProviderDelete(providerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderDelete", reflect.TypeOf((*MockApiClientInterface)(nil).ProviderDelete), providerId)
}

// ProviderUpdate mocks base method.
func (m *MockApiClientInterface) ProviderUpdate(providerId string, payload ProviderUpdatePayload) (*Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderUpdate", providerId, payload)
	ret0, _ := ret[0].(*Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderUpdate indicates an expected call of ProviderUpdate.
func (mr *MockApiClientInterfaceMockRecorder) ProviderUpdate(providerId, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).ProviderUpdate), providerId, payload)
}

// Providers mocks base method.
func (m *MockApiClientInterface) Providers() ([]Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Providers")
	ret0, _ := ret[0].([]Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Providers indicates an expected call of Providers.
func (mr *MockApiClientInterfaceMockRecorder) Providers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Providers", reflect.TypeOf((*MockApiClientInterface)(nil).Providers))
}

// PutEnvironmentDiscovery mocks base method.
func (m *MockApiClientInterface) PutEnvironmentDiscovery(projectId string, payload *EnvironmentDiscoveryPutPayload) (*EnvironmentDiscoveryPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEnvironmentDiscovery", projectId, payload)
	ret0, _ := ret[0].(*EnvironmentDiscoveryPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEnvironmentDiscovery indicates an expected call of PutEnvironmentDiscovery.
func (mr *MockApiClientInterfaceMockRecorder) PutEnvironmentDiscovery(projectId, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEnvironmentDiscovery", reflect.TypeOf((*MockApiClientInterface)(nil).PutEnvironmentDiscovery), projectId, payload)
}

// RemoteStateAccessConfiguration mocks base method.
func (m *MockApiClientInterface) RemoteStateAccessConfiguration(environmentId string) (*RemoteStateAccessConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteStateAccessConfiguration", environmentId)
	ret0, _ := ret[0].(*RemoteStateAccessConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteStateAccessConfiguration indicates an expected call of RemoteStateAccessConfiguration.
func (mr *MockApiClientInterfaceMockRecorder) RemoteStateAccessConfiguration(environmentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteStateAccessConfiguration", reflect.TypeOf((*MockApiClientInterface)(nil).RemoteStateAccessConfiguration), environmentId)
}

// RemoteStateAccessConfigurationCreate mocks base method.
func (m *MockApiClientInterface) RemoteStateAccessConfigurationCreate(environmentId string, payload RemoteStateAccessConfigurationCreate) (*RemoteStateAccessConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteStateAccessConfigurationCreate", environmentId, payload)
	ret0, _ := ret[0].(*RemoteStateAccessConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteStateAccessConfigurationCreate indicates an expected call of RemoteStateAccessConfigurationCreate.
func (mr *MockApiClientInterfaceMockRecorder) RemoteStateAccessConfigurationCreate(environmentId, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteStateAccessConfigurationCreate", reflect.TypeOf((*MockApiClientInterface)(nil).RemoteStateAccessConfigurationCreate), environmentId, payload)
}

// RemoteStateAccessConfigurationDelete mocks base method.
func (m *MockApiClientInterface) RemoteStateAccessConfigurationDelete(environmentId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteStateAccessConfigurationDelete", environmentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoteStateAccessConfigurationDelete indicates an expected call of RemoteStateAccessConfigurationDelete.
func (mr *MockApiClientInterfaceMockRecorder) RemoteStateAccessConfigurationDelete(environmentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteStateAccessConfigurationDelete", reflect.TypeOf((*MockApiClientInterface)(nil).RemoteStateAccessConfigurationDelete), environmentId)
}

// RemoveCloudCredentialsFromProject mocks base method.
func (m *MockApiClientInterface) RemoveCloudCredentialsFromProject(projectId, credentialId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCloudCredentialsFromProject", projectId, credentialId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCloudCredentialsFromProject indicates an expected call of RemoveCloudCredentialsFromProject.
func (mr *MockApiClientInterfaceMockRecorder) RemoveCloudCredentialsFromProject(projectId, credentialId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCloudCredentialsFromProject", reflect.TypeOf((*MockApiClientInterface)(nil).RemoveCloudCredentialsFromProject), projectId, credentialId)
}

// RemoveCostCredentialsFromProject mocks base method.
func (m *MockApiClientInterface) RemoveCostCredentialsFromProject(projectId, credentialId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCostCredentialsFromProject", projectId, credentialId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCostCredentialsFromProject indicates an expected call of RemoveCostCredentialsFromProject.
func (mr *MockApiClientInterfaceMockRecorder) RemoveCostCredentialsFromProject(projectId, credentialId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCostCredentialsFromProject", reflect.TypeOf((*MockApiClientInterface)(nil).RemoveCostCredentialsFromProject), projectId, credentialId)
}

// RemoveTemplateFromProject mocks base method.
func (m *MockApiClientInterface) RemoveTemplateFromProject(templateId, projectId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTemplateFromProject", templateId, projectId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTemplateFromProject indicates an expected call of RemoveTemplateFromProject.
func (mr *MockApiClientInterfaceMockRecorder) RemoveTemplateFromProject(templateId, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTemplateFromProject", reflect.TypeOf((*MockApiClientInterface)(nil).RemoveTemplateFromProject), templateId, projectId)
}

// RemoveUserFromProject mocks base method.
func (m *MockApiClientInterface) RemoveUserFromProject(projectId, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromProject", projectId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromProject indicates an expected call of RemoveUserFromProject.
func (mr *MockApiClientInterfaceMockRecorder) RemoveUserFromProject(projectId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromProject", reflect.TypeOf((*MockApiClientInterface)(nil).RemoveUserFromProject), projectId, userId)
}

// RemoveUserRoleFromEnvironment mocks base method.
func (m *MockApiClientInterface) RemoveUserRoleFromEnvironment(environmentId, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserRoleFromEnvironment", environmentId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserRoleFromEnvironment indicates an expected call of RemoveUserRoleFromEnvironment.
func (mr *MockApiClientInterfaceMockRecorder) RemoveUserRoleFromEnvironment(environmentId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserRoleFromEnvironment", reflect.TypeOf((*MockApiClientInterface)(nil).RemoveUserRoleFromEnvironment), environmentId, userId)
}

// Role mocks base method.
func (m *MockApiClientInterface) Role(id string) (*Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Role", id)
	ret0, _ := ret[0].(*Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Role indicates an expected call of Role.
func (mr *MockApiClientInterfaceMockRecorder) Role(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Role", reflect.TypeOf((*MockApiClientInterface)(nil).Role), id)
}

// RoleCreate mocks base method.
func (m *MockApiClientInterface) RoleCreate(payload RoleCreatePayload) (*Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleCreate", payload)
	ret0, _ := ret[0].(*Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleCreate indicates an expected call of RoleCreate.
func (mr *MockApiClientInterfaceMockRecorder) RoleCreate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleCreate", reflect.TypeOf((*MockApiClientInterface)(nil).RoleCreate), payload)
}

// RoleDelete mocks base method.
func (m *MockApiClientInterface) RoleDelete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RoleDelete indicates an expected call of RoleDelete.
func (mr *MockApiClientInterfaceMockRecorder) RoleDelete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleDelete", reflect.TypeOf((*MockApiClientInterface)(nil).RoleDelete), id)
}

// RoleUpdate mocks base method.
func (m *MockApiClientInterface) RoleUpdate(id string, payload RoleUpdatePayload) (*Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleUpdate", id, payload)
	ret0, _ := ret[0].(*Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleUpdate indicates an expected call of RoleUpdate.
func (mr *MockApiClientInterfaceMockRecorder) RoleUpdate(id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).RoleUpdate), id, payload)
}

// Roles mocks base method.
func (m *MockApiClientInterface) Roles() ([]Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roles")
	ret0, _ := ret[0].([]Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Roles indicates an expected call of Roles.
func (mr *MockApiClientInterfaceMockRecorder) Roles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roles", reflect.TypeOf((*MockApiClientInterface)(nil).Roles))
}

// SshKeyCreate mocks base method.
func (m *MockApiClientInterface) SshKeyCreate(payload SshKeyCreatePayload) (*SshKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeyCreate", payload)
	ret0, _ := ret[0].(*SshKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SshKeyCreate indicates an expected call of SshKeyCreate.
func (mr *MockApiClientInterfaceMockRecorder) SshKeyCreate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeyCreate", reflect.TypeOf((*MockApiClientInterface)(nil).SshKeyCreate), payload)
}

// SshKeyDelete mocks base method.
func (m *MockApiClientInterface) SshKeyDelete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeyDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SshKeyDelete indicates an expected call of SshKeyDelete.
func (mr *MockApiClientInterfaceMockRecorder) SshKeyDelete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeyDelete", reflect.TypeOf((*MockApiClientInterface)(nil).SshKeyDelete), id)
}

// SshKeyUpdate mocks base method.
func (m *MockApiClientInterface) SshKeyUpdate(id string, payload *SshKeyUpdatePayload) (*SshKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeyUpdate", id, payload)
	ret0, _ := ret[0].(*SshKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SshKeyUpdate indicates an expected call of SshKeyUpdate.
func (mr *MockApiClientInterfaceMockRecorder) SshKeyUpdate(id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeyUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).SshKeyUpdate), id, payload)
}

// SshKeys mocks base method.
func (m *MockApiClientInterface) SshKeys() ([]SshKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeys")
	ret0, _ := ret[0].([]SshKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SshKeys indicates an expected call of SshKeys.
func (mr *MockApiClientInterfaceMockRecorder) SshKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeys", reflect.TypeOf((*MockApiClientInterface)(nil).SshKeys))
}

// SubscribeWorkflowTrigger mocks base method.
func (m *MockApiClientInterface) SubscribeWorkflowTrigger(environmentId string, payload WorkflowTriggerEnvironments) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeWorkflowTrigger", environmentId, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeWorkflowTrigger indicates an expected call of SubscribeWorkflowTrigger.
func (mr *MockApiClientInterfaceMockRecorder) SubscribeWorkflowTrigger(environmentId, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeWorkflowTrigger", reflect.TypeOf((*MockApiClientInterface)(nil).SubscribeWorkflowTrigger), environmentId, payload)
}

// Team mocks base method.
func (m *MockApiClientInterface) Team(id string) (Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Team", id)
	ret0, _ := ret[0].(Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Team indicates an expected call of Team.
func (mr *MockApiClientInterfaceMockRecorder) Team(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Team", reflect.TypeOf((*MockApiClientInterface)(nil).Team), id)
}

// TeamCreate mocks base method.
func (m *MockApiClientInterface) TeamCreate(payload TeamCreatePayload) (Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamCreate", payload)
	ret0, _ := ret[0].(Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamCreate indicates an expected call of TeamCreate.
func (mr *MockApiClientInterfaceMockRecorder) TeamCreate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamCreate", reflect.TypeOf((*MockApiClientInterface)(nil).TeamCreate), payload)
}

// TeamDelete mocks base method.
func (m *MockApiClientInterface) TeamDelete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TeamDelete indicates an expected call of TeamDelete.
func (mr *MockApiClientInterfaceMockRecorder) TeamDelete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamDelete", reflect.TypeOf((*MockApiClientInterface)(nil).TeamDelete), id)
}

// TeamRoleAssignmentCreateOrUpdate mocks base method.
func (m *MockApiClientInterface) TeamRoleAssignmentCreateOrUpdate(payload *TeamRoleAssignmentCreateOrUpdatePayload) (*TeamRoleAssignmentPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamRoleAssignmentCreateOrUpdate", payload)
	ret0, _ := ret[0].(*TeamRoleAssignmentPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamRoleAssignmentCreateOrUpdate indicates an expected call of TeamRoleAssignmentCreateOrUpdate.
func (mr *MockApiClientInterfaceMockRecorder) TeamRoleAssignmentCreateOrUpdate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamRoleAssignmentCreateOrUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).TeamRoleAssignmentCreateOrUpdate), payload)
}

// TeamRoleAssignmentDelete mocks base method.
func (m *MockApiClientInterface) TeamRoleAssignmentDelete(payload *TeamRoleAssignmentDeletePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamRoleAssignmentDelete", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// TeamRoleAssignmentDelete indicates an expected call of TeamRoleAssignmentDelete.
func (mr *MockApiClientInterfaceMockRecorder) TeamRoleAssignmentDelete(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamRoleAssignmentDelete", reflect.TypeOf((*MockApiClientInterface)(nil).TeamRoleAssignmentDelete), payload)
}

// TeamRoleAssignments mocks base method.
func (m *MockApiClientInterface) TeamRoleAssignments(payload *TeamRoleAssignmentListPayload) ([]TeamRoleAssignmentPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamRoleAssignments", payload)
	ret0, _ := ret[0].([]TeamRoleAssignmentPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamRoleAssignments indicates an expected call of TeamRoleAssignments.
func (mr *MockApiClientInterfaceMockRecorder) TeamRoleAssignments(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamRoleAssignments", reflect.TypeOf((*MockApiClientInterface)(nil).TeamRoleAssignments), payload)
}

// TeamUpdate mocks base method.
func (m *MockApiClientInterface) TeamUpdate(id string, payload TeamUpdatePayload) (Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamUpdate", id, payload)
	ret0, _ := ret[0].(Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamUpdate indicates an expected call of TeamUpdate.
func (mr *MockApiClientInterfaceMockRecorder) TeamUpdate(id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).TeamUpdate), id, payload)
}

// Teams mocks base method.
func (m *MockApiClientInterface) Teams() ([]Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teams")
	ret0, _ := ret[0].([]Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Teams indicates an expected call of Teams.
func (mr *MockApiClientInterfaceMockRecorder) Teams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teams", reflect.TypeOf((*MockApiClientInterface)(nil).Teams))
}

// TeamsByName mocks base method.
func (m *MockApiClientInterface) TeamsByName(name string) ([]Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamsByName", name)
	ret0, _ := ret[0].([]Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamsByName indicates an expected call of TeamsByName.
func (mr *MockApiClientInterfaceMockRecorder) TeamsByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamsByName", reflect.TypeOf((*MockApiClientInterface)(nil).TeamsByName), name)
}

// Template mocks base method.
func (m *MockApiClientInterface) Template(id string) (Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Template", id)
	ret0, _ := ret[0].(Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Template indicates an expected call of Template.
func (mr *MockApiClientInterfaceMockRecorder) Template(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Template", reflect.TypeOf((*MockApiClientInterface)(nil).Template), id)
}

// TemplateCreate mocks base method.
func (m *MockApiClientInterface) TemplateCreate(payload TemplateCreatePayload) (Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateCreate", payload)
	ret0, _ := ret[0].(Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateCreate indicates an expected call of TemplateCreate.
func (mr *MockApiClientInterfaceMockRecorder) TemplateCreate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateCreate", reflect.TypeOf((*MockApiClientInterface)(nil).TemplateCreate), payload)
}

// TemplateDelete mocks base method.
func (m *MockApiClientInterface) TemplateDelete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TemplateDelete indicates an expected call of TemplateDelete.
func (mr *MockApiClientInterfaceMockRecorder) TemplateDelete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateDelete", reflect.TypeOf((*MockApiClientInterface)(nil).TemplateDelete), id)
}

// TemplateUpdate mocks base method.
func (m *MockApiClientInterface) TemplateUpdate(id string, payload TemplateCreatePayload) (Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateUpdate", id, payload)
	ret0, _ := ret[0].(Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateUpdate indicates an expected call of TemplateUpdate.
func (mr *MockApiClientInterfaceMockRecorder) TemplateUpdate(id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).TemplateUpdate), id, payload)
}

// Templates mocks base method.
func (m *MockApiClientInterface) Templates() ([]Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Templates")
	ret0, _ := ret[0].([]Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Templates indicates an expected call of Templates.
func (mr *MockApiClientInterfaceMockRecorder) Templates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Templates", reflect.TypeOf((*MockApiClientInterface)(nil).Templates))
}

// UnassignConfigurationSets mocks base method.
func (m *MockApiClientInterface) UnassignConfigurationSets(scope, scopeId string, sets []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignConfigurationSets", scope, scopeId, sets)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignConfigurationSets indicates an expected call of UnassignConfigurationSets.
func (mr *MockApiClientInterfaceMockRecorder) UnassignConfigurationSets(scope, scopeId, sets any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignConfigurationSets", reflect.TypeOf((*MockApiClientInterface)(nil).UnassignConfigurationSets), scope, scopeId, sets)
}

// UnsubscribeWorkflowTrigger mocks base method.
func (m *MockApiClientInterface) UnsubscribeWorkflowTrigger(environmentId string, payload WorkflowTriggerEnvironments) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubscribeWorkflowTrigger", environmentId, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsubscribeWorkflowTrigger indicates an expected call of UnsubscribeWorkflowTrigger.
func (mr *MockApiClientInterfaceMockRecorder) UnsubscribeWorkflowTrigger(environmentId, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeWorkflowTrigger", reflect.TypeOf((*MockApiClientInterface)(nil).UnsubscribeWorkflowTrigger), environmentId, payload)
}

// UpdateUserProjectAssignment mocks base method.
func (m *MockApiClientInterface) UpdateUserProjectAssignment(projectId, userId string, payload *UpdateUserProjectAssignmentPayload) (*UserProjectAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProjectAssignment", projectId, userId, payload)
	ret0, _ := ret[0].(*UserProjectAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserProjectAssignment indicates an expected call of UpdateUserProjectAssignment.
func (mr *MockApiClientInterfaceMockRecorder) UpdateUserProjectAssignment(projectId, userId, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProjectAssignment", reflect.TypeOf((*MockApiClientInterface)(nil).UpdateUserProjectAssignment), projectId, userId, payload)
}

// UserProjectAssignments mocks base method.
func (m *MockApiClientInterface) UserProjectAssignments(projectId string) ([]UserProjectAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserProjectAssignments", projectId)
	ret0, _ := ret[0].([]UserProjectAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserProjectAssignments indicates an expected call of UserProjectAssignments.
func (mr *MockApiClientInterfaceMockRecorder) UserProjectAssignments(projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserProjectAssignments", reflect.TypeOf((*MockApiClientInterface)(nil).UserProjectAssignments), projectId)
}

// UserRoleEnvironmentAssignments mocks base method.
func (m *MockApiClientInterface) UserRoleEnvironmentAssignments(environmentId string) ([]UserRoleEnvironmentAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRoleEnvironmentAssignments", environmentId)
	ret0, _ := ret[0].([]UserRoleEnvironmentAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRoleEnvironmentAssignments indicates an expected call of UserRoleEnvironmentAssignments.
func (mr *MockApiClientInterfaceMockRecorder) UserRoleEnvironmentAssignments(environmentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRoleEnvironmentAssignments", reflect.TypeOf((*MockApiClientInterface)(nil).UserRoleEnvironmentAssignments), environmentId)
}

// Users mocks base method.
func (m *MockApiClientInterface) Users() ([]OrganizationUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].([]OrganizationUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Users indicates an expected call of Users.
func (mr *MockApiClientInterfaceMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockApiClientInterface)(nil).Users))
}

// VariablesFromRepository mocks base method.
func (m *MockApiClientInterface) VariablesFromRepository(payload *VariablesFromRepositoryPayload) ([]ConfigurationVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VariablesFromRepository", payload)
	ret0, _ := ret[0].([]ConfigurationVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VariablesFromRepository indicates an expected call of VariablesFromRepository.
func (mr *MockApiClientInterfaceMockRecorder) VariablesFromRepository(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariablesFromRepository", reflect.TypeOf((*MockApiClientInterface)(nil).VariablesFromRepository), payload)
}

// VcsConnection mocks base method.
func (m *MockApiClientInterface) VcsConnection(id string) (*VcsConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VcsConnection", id)
	ret0, _ := ret[0].(*VcsConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VcsConnection indicates an expected call of VcsConnection.
func (mr *MockApiClientInterfaceMockRecorder) VcsConnection(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VcsConnection", reflect.TypeOf((*MockApiClientInterface)(nil).VcsConnection), id)
}

// VcsConnectionCreate mocks base method.
func (m *MockApiClientInterface) VcsConnectionCreate(payload VcsConnectionCreatePayload) (*VcsConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VcsConnectionCreate", payload)
	ret0, _ := ret[0].(*VcsConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VcsConnectionCreate indicates an expected call of VcsConnectionCreate.
func (mr *MockApiClientInterfaceMockRecorder) VcsConnectionCreate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VcsConnectionCreate", reflect.TypeOf((*MockApiClientInterface)(nil).VcsConnectionCreate), payload)
}

// VcsConnectionDelete mocks base method.
func (m *MockApiClientInterface) VcsConnectionDelete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VcsConnectionDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// VcsConnectionDelete indicates an expected call of VcsConnectionDelete.
func (mr *MockApiClientInterfaceMockRecorder) VcsConnectionDelete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VcsConnectionDelete", reflect.TypeOf((*MockApiClientInterface)(nil).VcsConnectionDelete), id)
}

// VcsConnectionUpdate mocks base method.
func (m *MockApiClientInterface) VcsConnectionUpdate(id string, payload VcsConnectionUpdatePayload) (*VcsConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VcsConnectionUpdate", id, payload)
	ret0, _ := ret[0].(*VcsConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VcsConnectionUpdate indicates an expected call of VcsConnectionUpdate.
func (mr *MockApiClientInterfaceMockRecorder) VcsConnectionUpdate(id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VcsConnectionUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).VcsConnectionUpdate), id, payload)
}

// VcsConnections mocks base method.
func (m *MockApiClientInterface) VcsConnections() ([]VcsConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VcsConnections")
	ret0, _ := ret[0].([]VcsConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VcsConnections indicates an expected call of VcsConnections.
func (mr *MockApiClientInterfaceMockRecorder) VcsConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VcsConnections", reflect.TypeOf((*MockApiClientInterface)(nil).VcsConnections))
}

// VcsToken mocks base method.
func (m *MockApiClientInterface) VcsToken(vcsType, repository string) (*VscToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VcsToken", vcsType, repository)
	ret0, _ := ret[0].(*VscToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VcsToken indicates an expected call of VcsToken.
func (mr *MockApiClientInterfaceMockRecorder) VcsToken(vcsType, repository any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VcsToken", reflect.TypeOf((*MockApiClientInterface)(nil).VcsToken), vcsType, repository)
}

// WorkflowTrigger mocks base method.
func (m *MockApiClientInterface) WorkflowTrigger(environmentId string) ([]WorkflowTrigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowTrigger", environmentId)
	ret0, _ := ret[0].([]WorkflowTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowTrigger indicates an expected call of WorkflowTrigger.
func (mr *MockApiClientInterfaceMockRecorder) WorkflowTrigger(environmentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowTrigger", reflect.TypeOf((*MockApiClientInterface)(nil).WorkflowTrigger), environmentId)
}

// WorkflowTriggerUpsert mocks base method.
func (m *MockApiClientInterface) WorkflowTriggerUpsert(environmentId string, request WorkflowTriggerUpsertPayload) ([]WorkflowTrigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowTriggerUpsert", environmentId, request)
	ret0, _ := ret[0].([]WorkflowTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowTriggerUpsert indicates an expected call of WorkflowTriggerUpsert.
func (mr *MockApiClientInterfaceMockRecorder) WorkflowTriggerUpsert(environmentId, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowTriggerUpsert", reflect.TypeOf((*MockApiClientInterface)(nil).WorkflowTriggerUpsert), environmentId, request)
}
