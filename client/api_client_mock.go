// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/env0/terraform-provider-env0/client (interfaces: ApiClientInterface)
//
// Generated by this command:
//
//	mockgen -destination=api_client_mock.go -package=client . ApiClientInterface
//
// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockApiClientInterface is a mock of ApiClientInterface interface.
type MockApiClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockApiClientInterfaceMockRecorder
}

// MockApiClientInterfaceMockRecorder is the mock recorder for MockApiClientInterface.
type MockApiClientInterfaceMockRecorder struct {
	mock *MockApiClientInterface
}

// NewMockApiClientInterface creates a new mock instance.
func NewMockApiClientInterface(ctrl *gomock.Controller) *MockApiClientInterface {
	mock := &MockApiClientInterface{ctrl: ctrl}
	mock.recorder = &MockApiClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiClientInterface) EXPECT() *MockApiClientInterfaceMockRecorder {
	return m.recorder
}

// AgentValues mocks base method.
func (m *MockApiClientInterface) AgentValues(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentValues", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentValues indicates an expected call of AgentValues.
func (mr *MockApiClientInterfaceMockRecorder) AgentValues(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentValues", reflect.TypeOf((*MockApiClientInterface)(nil).AgentValues), arg0)
}

// Agents mocks base method.
func (m *MockApiClientInterface) Agents() ([]Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Agents")
	ret0, _ := ret[0].([]Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Agents indicates an expected call of Agents.
func (mr *MockApiClientInterfaceMockRecorder) Agents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Agents", reflect.TypeOf((*MockApiClientInterface)(nil).Agents))
}

// ApiKeyCreate mocks base method.
func (m *MockApiClientInterface) ApiKeyCreate(arg0 ApiKeyCreatePayload) (*ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApiKeyCreate", arg0)
	ret0, _ := ret[0].(*ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApiKeyCreate indicates an expected call of ApiKeyCreate.
func (mr *MockApiClientInterfaceMockRecorder) ApiKeyCreate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApiKeyCreate", reflect.TypeOf((*MockApiClientInterface)(nil).ApiKeyCreate), arg0)
}

// ApiKeyDelete mocks base method.
func (m *MockApiClientInterface) ApiKeyDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApiKeyDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApiKeyDelete indicates an expected call of ApiKeyDelete.
func (mr *MockApiClientInterfaceMockRecorder) ApiKeyDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApiKeyDelete", reflect.TypeOf((*MockApiClientInterface)(nil).ApiKeyDelete), arg0)
}

// ApiKeys mocks base method.
func (m *MockApiClientInterface) ApiKeys() ([]ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApiKeys")
	ret0, _ := ret[0].([]ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApiKeys indicates an expected call of ApiKeys.
func (mr *MockApiClientInterfaceMockRecorder) ApiKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApiKeys", reflect.TypeOf((*MockApiClientInterface)(nil).ApiKeys))
}

// ApprovalPolicies mocks base method.
func (m *MockApiClientInterface) ApprovalPolicies(arg0 string) ([]ApprovalPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovalPolicies", arg0)
	ret0, _ := ret[0].([]ApprovalPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovalPolicies indicates an expected call of ApprovalPolicies.
func (mr *MockApiClientInterfaceMockRecorder) ApprovalPolicies(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovalPolicies", reflect.TypeOf((*MockApiClientInterface)(nil).ApprovalPolicies), arg0)
}

// ApprovalPolicyAssign mocks base method.
func (m *MockApiClientInterface) ApprovalPolicyAssign(arg0 *ApprovalPolicyAssignment) (*ApprovalPolicyAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovalPolicyAssign", arg0)
	ret0, _ := ret[0].(*ApprovalPolicyAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovalPolicyAssign indicates an expected call of ApprovalPolicyAssign.
func (mr *MockApiClientInterfaceMockRecorder) ApprovalPolicyAssign(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovalPolicyAssign", reflect.TypeOf((*MockApiClientInterface)(nil).ApprovalPolicyAssign), arg0)
}

// ApprovalPolicyByScope mocks base method.
func (m *MockApiClientInterface) ApprovalPolicyByScope(arg0, arg1 string) ([]ApprovalPolicyByScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovalPolicyByScope", arg0, arg1)
	ret0, _ := ret[0].([]ApprovalPolicyByScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovalPolicyByScope indicates an expected call of ApprovalPolicyByScope.
func (mr *MockApiClientInterfaceMockRecorder) ApprovalPolicyByScope(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovalPolicyByScope", reflect.TypeOf((*MockApiClientInterface)(nil).ApprovalPolicyByScope), arg0, arg1)
}

// ApprovalPolicyCreate mocks base method.
func (m *MockApiClientInterface) ApprovalPolicyCreate(arg0 *ApprovalPolicyCreatePayload) (*ApprovalPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovalPolicyCreate", arg0)
	ret0, _ := ret[0].(*ApprovalPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovalPolicyCreate indicates an expected call of ApprovalPolicyCreate.
func (mr *MockApiClientInterfaceMockRecorder) ApprovalPolicyCreate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovalPolicyCreate", reflect.TypeOf((*MockApiClientInterface)(nil).ApprovalPolicyCreate), arg0)
}

// ApprovalPolicyUnassign mocks base method.
func (m *MockApiClientInterface) ApprovalPolicyUnassign(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovalPolicyUnassign", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApprovalPolicyUnassign indicates an expected call of ApprovalPolicyUnassign.
func (mr *MockApiClientInterfaceMockRecorder) ApprovalPolicyUnassign(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovalPolicyUnassign", reflect.TypeOf((*MockApiClientInterface)(nil).ApprovalPolicyUnassign), arg0)
}

// ApprovalPolicyUpdate mocks base method.
func (m *MockApiClientInterface) ApprovalPolicyUpdate(arg0 *ApprovalPolicyUpdatePayload) (*ApprovalPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovalPolicyUpdate", arg0)
	ret0, _ := ret[0].(*ApprovalPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovalPolicyUpdate indicates an expected call of ApprovalPolicyUpdate.
func (mr *MockApiClientInterfaceMockRecorder) ApprovalPolicyUpdate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovalPolicyUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).ApprovalPolicyUpdate), arg0)
}

// AssignAgentsToProjects mocks base method.
func (m *MockApiClientInterface) AssignAgentsToProjects(arg0 AssignProjectsAgentsAssignmentsPayload) (*ProjectsAgentsAssignments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignAgentsToProjects", arg0)
	ret0, _ := ret[0].(*ProjectsAgentsAssignments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignAgentsToProjects indicates an expected call of AssignAgentsToProjects.
func (mr *MockApiClientInterfaceMockRecorder) AssignAgentsToProjects(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignAgentsToProjects", reflect.TypeOf((*MockApiClientInterface)(nil).AssignAgentsToProjects), arg0)
}

// AssignCloudCredentialsToProject mocks base method.
func (m *MockApiClientInterface) AssignCloudCredentialsToProject(arg0, arg1 string) (CloudCredentialsProjectAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignCloudCredentialsToProject", arg0, arg1)
	ret0, _ := ret[0].(CloudCredentialsProjectAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignCloudCredentialsToProject indicates an expected call of AssignCloudCredentialsToProject.
func (mr *MockApiClientInterfaceMockRecorder) AssignCloudCredentialsToProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignCloudCredentialsToProject", reflect.TypeOf((*MockApiClientInterface)(nil).AssignCloudCredentialsToProject), arg0, arg1)
}

// AssignConfigurationSets mocks base method.
func (m *MockApiClientInterface) AssignConfigurationSets(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignConfigurationSets", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignConfigurationSets indicates an expected call of AssignConfigurationSets.
func (mr *MockApiClientInterfaceMockRecorder) AssignConfigurationSets(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignConfigurationSets", reflect.TypeOf((*MockApiClientInterface)(nil).AssignConfigurationSets), arg0, arg1, arg2)
}

// AssignCostCredentialsToProject mocks base method.
func (m *MockApiClientInterface) AssignCostCredentialsToProject(arg0, arg1 string) (CostCredentialProjectAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignCostCredentialsToProject", arg0, arg1)
	ret0, _ := ret[0].(CostCredentialProjectAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignCostCredentialsToProject indicates an expected call of AssignCostCredentialsToProject.
func (mr *MockApiClientInterfaceMockRecorder) AssignCostCredentialsToProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignCostCredentialsToProject", reflect.TypeOf((*MockApiClientInterface)(nil).AssignCostCredentialsToProject), arg0, arg1)
}

// AssignTemplateToProject mocks base method.
func (m *MockApiClientInterface) AssignTemplateToProject(arg0 string, arg1 TemplateAssignmentToProjectPayload) (Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignTemplateToProject", arg0, arg1)
	ret0, _ := ret[0].(Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignTemplateToProject indicates an expected call of AssignTemplateToProject.
func (mr *MockApiClientInterfaceMockRecorder) AssignTemplateToProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignTemplateToProject", reflect.TypeOf((*MockApiClientInterface)(nil).AssignTemplateToProject), arg0, arg1)
}

// AssignUserRoleToEnvironment mocks base method.
func (m *MockApiClientInterface) AssignUserRoleToEnvironment(arg0 *AssignUserRoleToEnvironmentPayload) (*UserRoleEnvironmentAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignUserRoleToEnvironment", arg0)
	ret0, _ := ret[0].(*UserRoleEnvironmentAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignUserRoleToEnvironment indicates an expected call of AssignUserRoleToEnvironment.
func (mr *MockApiClientInterfaceMockRecorder) AssignUserRoleToEnvironment(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUserRoleToEnvironment", reflect.TypeOf((*MockApiClientInterface)(nil).AssignUserRoleToEnvironment), arg0)
}

// AssignUserToProject mocks base method.
func (m *MockApiClientInterface) AssignUserToProject(arg0 string, arg1 *AssignUserToProjectPayload) (*UserProjectAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignUserToProject", arg0, arg1)
	ret0, _ := ret[0].(*UserProjectAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignUserToProject indicates an expected call of AssignUserToProject.
func (mr *MockApiClientInterfaceMockRecorder) AssignUserToProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUserToProject", reflect.TypeOf((*MockApiClientInterface)(nil).AssignUserToProject), arg0, arg1)
}

// CloudCredentialIdsInProject mocks base method.
func (m *MockApiClientInterface) CloudCredentialIdsInProject(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudCredentialIdsInProject", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudCredentialIdsInProject indicates an expected call of CloudCredentialIdsInProject.
func (mr *MockApiClientInterfaceMockRecorder) CloudCredentialIdsInProject(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudCredentialIdsInProject", reflect.TypeOf((*MockApiClientInterface)(nil).CloudCredentialIdsInProject), arg0)
}

// CloudCredentials mocks base method.
func (m *MockApiClientInterface) CloudCredentials(arg0 string) (Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudCredentials", arg0)
	ret0, _ := ret[0].(Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudCredentials indicates an expected call of CloudCredentials.
func (mr *MockApiClientInterfaceMockRecorder) CloudCredentials(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudCredentials", reflect.TypeOf((*MockApiClientInterface)(nil).CloudCredentials), arg0)
}

// CloudCredentialsDelete mocks base method.
func (m *MockApiClientInterface) CloudCredentialsDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudCredentialsDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloudCredentialsDelete indicates an expected call of CloudCredentialsDelete.
func (mr *MockApiClientInterfaceMockRecorder) CloudCredentialsDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudCredentialsDelete", reflect.TypeOf((*MockApiClientInterface)(nil).CloudCredentialsDelete), arg0)
}

// CloudCredentialsList mocks base method.
func (m *MockApiClientInterface) CloudCredentialsList() ([]Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudCredentialsList")
	ret0, _ := ret[0].([]Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudCredentialsList indicates an expected call of CloudCredentialsList.
func (mr *MockApiClientInterfaceMockRecorder) CloudCredentialsList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudCredentialsList", reflect.TypeOf((*MockApiClientInterface)(nil).CloudCredentialsList))
}

// ConfigurationSet mocks base method.
func (m *MockApiClientInterface) ConfigurationSet(arg0 string) (*ConfigurationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationSet", arg0)
	ret0, _ := ret[0].(*ConfigurationSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationSet indicates an expected call of ConfigurationSet.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationSet(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationSet", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationSet), arg0)
}

// ConfigurationSetCreate mocks base method.
func (m *MockApiClientInterface) ConfigurationSetCreate(arg0 *CreateConfigurationSetPayload) (*ConfigurationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationSetCreate", arg0)
	ret0, _ := ret[0].(*ConfigurationSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationSetCreate indicates an expected call of ConfigurationSetCreate.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationSetCreate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationSetCreate", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationSetCreate), arg0)
}

// ConfigurationSetDelete mocks base method.
func (m *MockApiClientInterface) ConfigurationSetDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationSetDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigurationSetDelete indicates an expected call of ConfigurationSetDelete.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationSetDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationSetDelete", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationSetDelete), arg0)
}

// ConfigurationSetUpdate mocks base method.
func (m *MockApiClientInterface) ConfigurationSetUpdate(arg0 string, arg1 *UpdateConfigurationSetPayload) (*ConfigurationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationSetUpdate", arg0, arg1)
	ret0, _ := ret[0].(*ConfigurationSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationSetUpdate indicates an expected call of ConfigurationSetUpdate.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationSetUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationSetUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationSetUpdate), arg0, arg1)
}

// ConfigurationSets mocks base method.
func (m *MockApiClientInterface) ConfigurationSets(arg0, arg1 string) ([]ConfigurationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationSets", arg0, arg1)
	ret0, _ := ret[0].([]ConfigurationSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationSets indicates an expected call of ConfigurationSets.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationSets(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationSets", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationSets), arg0, arg1)
}

// ConfigurationSetsAssignments mocks base method.
func (m *MockApiClientInterface) ConfigurationSetsAssignments(arg0, arg1 string) ([]ConfigurationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationSetsAssignments", arg0, arg1)
	ret0, _ := ret[0].([]ConfigurationSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationSetsAssignments indicates an expected call of ConfigurationSetsAssignments.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationSetsAssignments(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationSetsAssignments", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationSetsAssignments), arg0, arg1)
}

// ConfigurationVariableCreate mocks base method.
func (m *MockApiClientInterface) ConfigurationVariableCreate(arg0 ConfigurationVariableCreateParams) (ConfigurationVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationVariableCreate", arg0)
	ret0, _ := ret[0].(ConfigurationVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationVariableCreate indicates an expected call of ConfigurationVariableCreate.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationVariableCreate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationVariableCreate", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationVariableCreate), arg0)
}

// ConfigurationVariableDelete mocks base method.
func (m *MockApiClientInterface) ConfigurationVariableDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationVariableDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigurationVariableDelete indicates an expected call of ConfigurationVariableDelete.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationVariableDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationVariableDelete", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationVariableDelete), arg0)
}

// ConfigurationVariableUpdate mocks base method.
func (m *MockApiClientInterface) ConfigurationVariableUpdate(arg0 ConfigurationVariableUpdateParams) (ConfigurationVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationVariableUpdate", arg0)
	ret0, _ := ret[0].(ConfigurationVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationVariableUpdate indicates an expected call of ConfigurationVariableUpdate.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationVariableUpdate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationVariableUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationVariableUpdate), arg0)
}

// ConfigurationVariablesById mocks base method.
func (m *MockApiClientInterface) ConfigurationVariablesById(arg0 string) (ConfigurationVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationVariablesById", arg0)
	ret0, _ := ret[0].(ConfigurationVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationVariablesById indicates an expected call of ConfigurationVariablesById.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationVariablesById(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationVariablesById", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationVariablesById), arg0)
}

// ConfigurationVariablesByScope mocks base method.
func (m *MockApiClientInterface) ConfigurationVariablesByScope(arg0 Scope, arg1 string) ([]ConfigurationVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationVariablesByScope", arg0, arg1)
	ret0, _ := ret[0].([]ConfigurationVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationVariablesByScope indicates an expected call of ConfigurationVariablesByScope.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationVariablesByScope(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationVariablesByScope", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationVariablesByScope), arg0, arg1)
}

// ConfigurationVariablesBySetId mocks base method.
func (m *MockApiClientInterface) ConfigurationVariablesBySetId(arg0 string) ([]ConfigurationVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationVariablesBySetId", arg0)
	ret0, _ := ret[0].([]ConfigurationVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationVariablesBySetId indicates an expected call of ConfigurationVariablesBySetId.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationVariablesBySetId(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationVariablesBySetId", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationVariablesBySetId), arg0)
}

// CostCredentialIdsInProject mocks base method.
func (m *MockApiClientInterface) CostCredentialIdsInProject(arg0 string) ([]CostCredentialProjectAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CostCredentialIdsInProject", arg0)
	ret0, _ := ret[0].([]CostCredentialProjectAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CostCredentialIdsInProject indicates an expected call of CostCredentialIdsInProject.
func (mr *MockApiClientInterfaceMockRecorder) CostCredentialIdsInProject(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CostCredentialIdsInProject", reflect.TypeOf((*MockApiClientInterface)(nil).CostCredentialIdsInProject), arg0)
}

// CredentialsCreate mocks base method.
func (m *MockApiClientInterface) CredentialsCreate(arg0 CredentialCreatePayload) (Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredentialsCreate", arg0)
	ret0, _ := ret[0].(Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CredentialsCreate indicates an expected call of CredentialsCreate.
func (mr *MockApiClientInterfaceMockRecorder) CredentialsCreate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredentialsCreate", reflect.TypeOf((*MockApiClientInterface)(nil).CredentialsCreate), arg0)
}

// CredentialsUpdate mocks base method.
func (m *MockApiClientInterface) CredentialsUpdate(arg0 string, arg1 CredentialCreatePayload) (Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredentialsUpdate", arg0, arg1)
	ret0, _ := ret[0].(Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CredentialsUpdate indicates an expected call of CredentialsUpdate.
func (mr *MockApiClientInterfaceMockRecorder) CredentialsUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredentialsUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).CredentialsUpdate), arg0, arg1)
}

// CustomFlow mocks base method.
func (m *MockApiClientInterface) CustomFlow(arg0 string) (*CustomFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomFlow", arg0)
	ret0, _ := ret[0].(*CustomFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomFlow indicates an expected call of CustomFlow.
func (mr *MockApiClientInterfaceMockRecorder) CustomFlow(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomFlow", reflect.TypeOf((*MockApiClientInterface)(nil).CustomFlow), arg0)
}

// CustomFlowAssign mocks base method.
func (m *MockApiClientInterface) CustomFlowAssign(arg0 []CustomFlowAssignment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomFlowAssign", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomFlowAssign indicates an expected call of CustomFlowAssign.
func (mr *MockApiClientInterfaceMockRecorder) CustomFlowAssign(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomFlowAssign", reflect.TypeOf((*MockApiClientInterface)(nil).CustomFlowAssign), arg0)
}

// CustomFlowCreate mocks base method.
func (m *MockApiClientInterface) CustomFlowCreate(arg0 CustomFlowCreatePayload) (*CustomFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomFlowCreate", arg0)
	ret0, _ := ret[0].(*CustomFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomFlowCreate indicates an expected call of CustomFlowCreate.
func (mr *MockApiClientInterfaceMockRecorder) CustomFlowCreate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomFlowCreate", reflect.TypeOf((*MockApiClientInterface)(nil).CustomFlowCreate), arg0)
}

// CustomFlowDelete mocks base method.
func (m *MockApiClientInterface) CustomFlowDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomFlowDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomFlowDelete indicates an expected call of CustomFlowDelete.
func (mr *MockApiClientInterfaceMockRecorder) CustomFlowDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomFlowDelete", reflect.TypeOf((*MockApiClientInterface)(nil).CustomFlowDelete), arg0)
}

// CustomFlowGetAssignments mocks base method.
func (m *MockApiClientInterface) CustomFlowGetAssignments(arg0 []CustomFlowAssignment) ([]CustomFlowAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomFlowGetAssignments", arg0)
	ret0, _ := ret[0].([]CustomFlowAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomFlowGetAssignments indicates an expected call of CustomFlowGetAssignments.
func (mr *MockApiClientInterfaceMockRecorder) CustomFlowGetAssignments(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomFlowGetAssignments", reflect.TypeOf((*MockApiClientInterface)(nil).CustomFlowGetAssignments), arg0)
}

// CustomFlowUnassign mocks base method.
func (m *MockApiClientInterface) CustomFlowUnassign(arg0 []CustomFlowAssignment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomFlowUnassign", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomFlowUnassign indicates an expected call of CustomFlowUnassign.
func (mr *MockApiClientInterfaceMockRecorder) CustomFlowUnassign(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomFlowUnassign", reflect.TypeOf((*MockApiClientInterface)(nil).CustomFlowUnassign), arg0)
}

// CustomFlowUpdate mocks base method.
func (m *MockApiClientInterface) CustomFlowUpdate(arg0 string, arg1 CustomFlowCreatePayload) (*CustomFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomFlowUpdate", arg0, arg1)
	ret0, _ := ret[0].(*CustomFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomFlowUpdate indicates an expected call of CustomFlowUpdate.
func (mr *MockApiClientInterfaceMockRecorder) CustomFlowUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomFlowUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).CustomFlowUpdate), arg0, arg1)
}

// CustomFlows mocks base method.
func (m *MockApiClientInterface) CustomFlows(arg0 string) ([]CustomFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomFlows", arg0)
	ret0, _ := ret[0].([]CustomFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomFlows indicates an expected call of CustomFlows.
func (mr *MockApiClientInterfaceMockRecorder) CustomFlows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomFlows", reflect.TypeOf((*MockApiClientInterface)(nil).CustomFlows), arg0)
}

// DeleteEnvironmentDiscovery mocks base method.
func (m *MockApiClientInterface) DeleteEnvironmentDiscovery(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentDiscovery", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvironmentDiscovery indicates an expected call of DeleteEnvironmentDiscovery.
func (mr *MockApiClientInterfaceMockRecorder) DeleteEnvironmentDiscovery(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentDiscovery", reflect.TypeOf((*MockApiClientInterface)(nil).DeleteEnvironmentDiscovery), arg0)
}

// Environment mocks base method.
func (m *MockApiClientInterface) Environment(arg0 string) (Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environment", arg0)
	ret0, _ := ret[0].(Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Environment indicates an expected call of Environment.
func (mr *MockApiClientInterfaceMockRecorder) Environment(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environment", reflect.TypeOf((*MockApiClientInterface)(nil).Environment), arg0)
}

// EnvironmentCreate mocks base method.
func (m *MockApiClientInterface) EnvironmentCreate(arg0 EnvironmentCreate) (Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentCreate", arg0)
	ret0, _ := ret[0].(Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentCreate indicates an expected call of EnvironmentCreate.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentCreate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentCreate", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentCreate), arg0)
}

// EnvironmentCreateWithoutTemplate mocks base method.
func (m *MockApiClientInterface) EnvironmentCreateWithoutTemplate(arg0 EnvironmentCreateWithoutTemplate) (Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentCreateWithoutTemplate", arg0)
	ret0, _ := ret[0].(Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentCreateWithoutTemplate indicates an expected call of EnvironmentCreateWithoutTemplate.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentCreateWithoutTemplate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentCreateWithoutTemplate", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentCreateWithoutTemplate), arg0)
}

// EnvironmentDeploy mocks base method.
func (m *MockApiClientInterface) EnvironmentDeploy(arg0 string, arg1 DeployRequest) (EnvironmentDeployResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentDeploy", arg0, arg1)
	ret0, _ := ret[0].(EnvironmentDeployResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentDeploy indicates an expected call of EnvironmentDeploy.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentDeploy(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentDeploy", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentDeploy), arg0, arg1)
}

// EnvironmentDestroy mocks base method.
func (m *MockApiClientInterface) EnvironmentDestroy(arg0 string) (Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentDestroy", arg0)
	ret0, _ := ret[0].(Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentDestroy indicates an expected call of EnvironmentDestroy.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentDestroy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentDestroy", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentDestroy), arg0)
}

// EnvironmentDriftDetection mocks base method.
func (m *MockApiClientInterface) EnvironmentDriftDetection(arg0 string) (EnvironmentSchedulingExpression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentDriftDetection", arg0)
	ret0, _ := ret[0].(EnvironmentSchedulingExpression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentDriftDetection indicates an expected call of EnvironmentDriftDetection.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentDriftDetection(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentDriftDetection", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentDriftDetection), arg0)
}

// EnvironmentMarkAsArchived mocks base method.
func (m *MockApiClientInterface) EnvironmentMarkAsArchived(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentMarkAsArchived", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentMarkAsArchived indicates an expected call of EnvironmentMarkAsArchived.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentMarkAsArchived(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentMarkAsArchived", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentMarkAsArchived), arg0)
}

// EnvironmentScheduling mocks base method.
func (m *MockApiClientInterface) EnvironmentScheduling(arg0 string) (EnvironmentScheduling, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentScheduling", arg0)
	ret0, _ := ret[0].(EnvironmentScheduling)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentScheduling indicates an expected call of EnvironmentScheduling.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentScheduling(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentScheduling", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentScheduling), arg0)
}

// EnvironmentSchedulingDelete mocks base method.
func (m *MockApiClientInterface) EnvironmentSchedulingDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentSchedulingDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentSchedulingDelete indicates an expected call of EnvironmentSchedulingDelete.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentSchedulingDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentSchedulingDelete", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentSchedulingDelete), arg0)
}

// EnvironmentSchedulingUpdate mocks base method.
func (m *MockApiClientInterface) EnvironmentSchedulingUpdate(arg0 string, arg1 EnvironmentScheduling) (EnvironmentScheduling, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentSchedulingUpdate", arg0, arg1)
	ret0, _ := ret[0].(EnvironmentScheduling)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentSchedulingUpdate indicates an expected call of EnvironmentSchedulingUpdate.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentSchedulingUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentSchedulingUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentSchedulingUpdate), arg0, arg1)
}

// EnvironmentStopDriftDetection mocks base method.
func (m *MockApiClientInterface) EnvironmentStopDriftDetection(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentStopDriftDetection", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnvironmentStopDriftDetection indicates an expected call of EnvironmentStopDriftDetection.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentStopDriftDetection(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentStopDriftDetection", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentStopDriftDetection), arg0)
}

// EnvironmentUpdate mocks base method.
func (m *MockApiClientInterface) EnvironmentUpdate(arg0 string, arg1 EnvironmentUpdate) (Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentUpdate", arg0, arg1)
	ret0, _ := ret[0].(Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentUpdate indicates an expected call of EnvironmentUpdate.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentUpdate), arg0, arg1)
}

// EnvironmentUpdateDriftDetection mocks base method.
func (m *MockApiClientInterface) EnvironmentUpdateDriftDetection(arg0 string, arg1 EnvironmentSchedulingExpression) (EnvironmentSchedulingExpression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentUpdateDriftDetection", arg0, arg1)
	ret0, _ := ret[0].(EnvironmentSchedulingExpression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentUpdateDriftDetection indicates an expected call of EnvironmentUpdateDriftDetection.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentUpdateDriftDetection(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentUpdateDriftDetection", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentUpdateDriftDetection), arg0, arg1)
}

// EnvironmentUpdateTTL mocks base method.
func (m *MockApiClientInterface) EnvironmentUpdateTTL(arg0 string, arg1 TTL) (Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentUpdateTTL", arg0, arg1)
	ret0, _ := ret[0].(Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentUpdateTTL indicates an expected call of EnvironmentUpdateTTL.
func (mr *MockApiClientInterfaceMockRecorder) EnvironmentUpdateTTL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentUpdateTTL", reflect.TypeOf((*MockApiClientInterface)(nil).EnvironmentUpdateTTL), arg0, arg1)
}

// Environments mocks base method.
func (m *MockApiClientInterface) Environments() ([]Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environments")
	ret0, _ := ret[0].([]Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Environments indicates an expected call of Environments.
func (mr *MockApiClientInterfaceMockRecorder) Environments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environments", reflect.TypeOf((*MockApiClientInterface)(nil).Environments))
}

// GetEnvironmentDiscovery mocks base method.
func (m *MockApiClientInterface) GetEnvironmentDiscovery(arg0 string) (*EnvironmentDiscoveryPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentDiscovery", arg0)
	ret0, _ := ret[0].(*EnvironmentDiscoveryPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentDiscovery indicates an expected call of GetEnvironmentDiscovery.
func (mr *MockApiClientInterfaceMockRecorder) GetEnvironmentDiscovery(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentDiscovery", reflect.TypeOf((*MockApiClientInterface)(nil).GetEnvironmentDiscovery), arg0)
}

// GitToken mocks base method.
func (m *MockApiClientInterface) GitToken(arg0 string) (*GitToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitToken", arg0)
	ret0, _ := ret[0].(*GitToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GitToken indicates an expected call of GitToken.
func (mr *MockApiClientInterfaceMockRecorder) GitToken(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitToken", reflect.TypeOf((*MockApiClientInterface)(nil).GitToken), arg0)
}

// GitTokenCreate mocks base method.
func (m *MockApiClientInterface) GitTokenCreate(arg0 GitTokenCreatePayload) (*GitToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitTokenCreate", arg0)
	ret0, _ := ret[0].(*GitToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GitTokenCreate indicates an expected call of GitTokenCreate.
func (mr *MockApiClientInterfaceMockRecorder) GitTokenCreate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitTokenCreate", reflect.TypeOf((*MockApiClientInterface)(nil).GitTokenCreate), arg0)
}

// GitTokenDelete mocks base method.
func (m *MockApiClientInterface) GitTokenDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitTokenDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GitTokenDelete indicates an expected call of GitTokenDelete.
func (mr *MockApiClientInterfaceMockRecorder) GitTokenDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitTokenDelete", reflect.TypeOf((*MockApiClientInterface)(nil).GitTokenDelete), arg0)
}

// GitTokens mocks base method.
func (m *MockApiClientInterface) GitTokens() ([]GitToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitTokens")
	ret0, _ := ret[0].([]GitToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GitTokens indicates an expected call of GitTokens.
func (mr *MockApiClientInterfaceMockRecorder) GitTokens() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitTokens", reflect.TypeOf((*MockApiClientInterface)(nil).GitTokens))
}

// GpgKeyCreate mocks base method.
func (m *MockApiClientInterface) GpgKeyCreate(arg0 *GpgKeyCreatePayload) (*GpgKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpgKeyCreate", arg0)
	ret0, _ := ret[0].(*GpgKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GpgKeyCreate indicates an expected call of GpgKeyCreate.
func (mr *MockApiClientInterfaceMockRecorder) GpgKeyCreate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpgKeyCreate", reflect.TypeOf((*MockApiClientInterface)(nil).GpgKeyCreate), arg0)
}

// GpgKeyDelete mocks base method.
func (m *MockApiClientInterface) GpgKeyDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpgKeyDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GpgKeyDelete indicates an expected call of GpgKeyDelete.
func (mr *MockApiClientInterfaceMockRecorder) GpgKeyDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpgKeyDelete", reflect.TypeOf((*MockApiClientInterface)(nil).GpgKeyDelete), arg0)
}

// GpgKeys mocks base method.
func (m *MockApiClientInterface) GpgKeys() ([]GpgKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpgKeys")
	ret0, _ := ret[0].([]GpgKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GpgKeys indicates an expected call of GpgKeys.
func (mr *MockApiClientInterfaceMockRecorder) GpgKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpgKeys", reflect.TypeOf((*MockApiClientInterface)(nil).GpgKeys))
}

// KubernetesCredentialsCreate mocks base method.
func (m *MockApiClientInterface) KubernetesCredentialsCreate(arg0 *KubernetesCredentialsCreatePayload) (*Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubernetesCredentialsCreate", arg0)
	ret0, _ := ret[0].(*Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KubernetesCredentialsCreate indicates an expected call of KubernetesCredentialsCreate.
func (mr *MockApiClientInterfaceMockRecorder) KubernetesCredentialsCreate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubernetesCredentialsCreate", reflect.TypeOf((*MockApiClientInterface)(nil).KubernetesCredentialsCreate), arg0)
}

// KubernetesCredentialsUpdate mocks base method.
func (m *MockApiClientInterface) KubernetesCredentialsUpdate(arg0 string, arg1 *KubernetesCredentialsUpdatePayload) (*Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubernetesCredentialsUpdate", arg0, arg1)
	ret0, _ := ret[0].(*Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KubernetesCredentialsUpdate indicates an expected call of KubernetesCredentialsUpdate.
func (mr *MockApiClientInterfaceMockRecorder) KubernetesCredentialsUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubernetesCredentialsUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).KubernetesCredentialsUpdate), arg0, arg1)
}

// Module mocks base method.
func (m *MockApiClientInterface) Module(arg0 string) (*Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Module", arg0)
	ret0, _ := ret[0].(*Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Module indicates an expected call of Module.
func (mr *MockApiClientInterfaceMockRecorder) Module(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Module", reflect.TypeOf((*MockApiClientInterface)(nil).Module), arg0)
}

// ModuleCreate mocks base method.
func (m *MockApiClientInterface) ModuleCreate(arg0 ModuleCreatePayload) (*Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModuleCreate", arg0)
	ret0, _ := ret[0].(*Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModuleCreate indicates an expected call of ModuleCreate.
func (mr *MockApiClientInterfaceMockRecorder) ModuleCreate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleCreate", reflect.TypeOf((*MockApiClientInterface)(nil).ModuleCreate), arg0)
}

// ModuleDelete mocks base method.
func (m *MockApiClientInterface) ModuleDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModuleDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModuleDelete indicates an expected call of ModuleDelete.
func (mr *MockApiClientInterfaceMockRecorder) ModuleDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleDelete", reflect.TypeOf((*MockApiClientInterface)(nil).ModuleDelete), arg0)
}

// ModuleTestingProject mocks base method.
func (m *MockApiClientInterface) ModuleTestingProject() (*ModuleTestingProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModuleTestingProject")
	ret0, _ := ret[0].(*ModuleTestingProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModuleTestingProject indicates an expected call of ModuleTestingProject.
func (mr *MockApiClientInterfaceMockRecorder) ModuleTestingProject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleTestingProject", reflect.TypeOf((*MockApiClientInterface)(nil).ModuleTestingProject))
}

// ModuleUpdate mocks base method.
func (m *MockApiClientInterface) ModuleUpdate(arg0 string, arg1 ModuleUpdatePayload) (*Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModuleUpdate", arg0, arg1)
	ret0, _ := ret[0].(*Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModuleUpdate indicates an expected call of ModuleUpdate.
func (mr *MockApiClientInterfaceMockRecorder) ModuleUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).ModuleUpdate), arg0, arg1)
}

// Modules mocks base method.
func (m *MockApiClientInterface) Modules() ([]Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Modules")
	ret0, _ := ret[0].([]Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Modules indicates an expected call of Modules.
func (mr *MockApiClientInterfaceMockRecorder) Modules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modules", reflect.TypeOf((*MockApiClientInterface)(nil).Modules))
}

// NotificationCreate mocks base method.
func (m *MockApiClientInterface) NotificationCreate(arg0 NotificationCreatePayload) (*Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationCreate", arg0)
	ret0, _ := ret[0].(*Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotificationCreate indicates an expected call of NotificationCreate.
func (mr *MockApiClientInterfaceMockRecorder) NotificationCreate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationCreate", reflect.TypeOf((*MockApiClientInterface)(nil).NotificationCreate), arg0)
}

// NotificationDelete mocks base method.
func (m *MockApiClientInterface) NotificationDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotificationDelete indicates an expected call of NotificationDelete.
func (mr *MockApiClientInterfaceMockRecorder) NotificationDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationDelete", reflect.TypeOf((*MockApiClientInterface)(nil).NotificationDelete), arg0)
}

// NotificationProjectAssignmentUpdate mocks base method.
func (m *MockApiClientInterface) NotificationProjectAssignmentUpdate(arg0, arg1 string, arg2 NotificationProjectAssignmentUpdatePayload) (*NotificationProjectAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationProjectAssignmentUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*NotificationProjectAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotificationProjectAssignmentUpdate indicates an expected call of NotificationProjectAssignmentUpdate.
func (mr *MockApiClientInterfaceMockRecorder) NotificationProjectAssignmentUpdate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationProjectAssignmentUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).NotificationProjectAssignmentUpdate), arg0, arg1, arg2)
}

// NotificationProjectAssignments mocks base method.
func (m *MockApiClientInterface) NotificationProjectAssignments(arg0 string) ([]NotificationProjectAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationProjectAssignments", arg0)
	ret0, _ := ret[0].([]NotificationProjectAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotificationProjectAssignments indicates an expected call of NotificationProjectAssignments.
func (mr *MockApiClientInterfaceMockRecorder) NotificationProjectAssignments(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationProjectAssignments", reflect.TypeOf((*MockApiClientInterface)(nil).NotificationProjectAssignments), arg0)
}

// NotificationUpdate mocks base method.
func (m *MockApiClientInterface) NotificationUpdate(arg0 string, arg1 NotificationUpdatePayload) (*Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationUpdate", arg0, arg1)
	ret0, _ := ret[0].(*Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotificationUpdate indicates an expected call of NotificationUpdate.
func (mr *MockApiClientInterfaceMockRecorder) NotificationUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).NotificationUpdate), arg0, arg1)
}

// Notifications mocks base method.
func (m *MockApiClientInterface) Notifications() ([]Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notifications")
	ret0, _ := ret[0].([]Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Notifications indicates an expected call of Notifications.
func (mr *MockApiClientInterfaceMockRecorder) Notifications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notifications", reflect.TypeOf((*MockApiClientInterface)(nil).Notifications))
}

// OidcSub mocks base method.
func (m *MockApiClientInterface) OidcSub() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OidcSub")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OidcSub indicates an expected call of OidcSub.
func (mr *MockApiClientInterfaceMockRecorder) OidcSub() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OidcSub", reflect.TypeOf((*MockApiClientInterface)(nil).OidcSub))
}

// Organization mocks base method.
func (m *MockApiClientInterface) Organization() (Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Organization")
	ret0, _ := ret[0].(Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Organization indicates an expected call of Organization.
func (mr *MockApiClientInterfaceMockRecorder) Organization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Organization", reflect.TypeOf((*MockApiClientInterface)(nil).Organization))
}

// OrganizationId mocks base method.
func (m *MockApiClientInterface) OrganizationId() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationId")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationId indicates an expected call of OrganizationId.
func (mr *MockApiClientInterfaceMockRecorder) OrganizationId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationId", reflect.TypeOf((*MockApiClientInterface)(nil).OrganizationId))
}

// OrganizationPolicyUpdate mocks base method.
func (m *MockApiClientInterface) OrganizationPolicyUpdate(arg0 OrganizationPolicyUpdatePayload) (*Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationPolicyUpdate", arg0)
	ret0, _ := ret[0].(*Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationPolicyUpdate indicates an expected call of OrganizationPolicyUpdate.
func (mr *MockApiClientInterfaceMockRecorder) OrganizationPolicyUpdate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationPolicyUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).OrganizationPolicyUpdate), arg0)
}

// OrganizationUserUpdateRole mocks base method.
func (m *MockApiClientInterface) OrganizationUserUpdateRole(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationUserUpdateRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrganizationUserUpdateRole indicates an expected call of OrganizationUserUpdateRole.
func (mr *MockApiClientInterfaceMockRecorder) OrganizationUserUpdateRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationUserUpdateRole", reflect.TypeOf((*MockApiClientInterface)(nil).OrganizationUserUpdateRole), arg0, arg1)
}

// Policy mocks base method.
func (m *MockApiClientInterface) Policy(arg0 string) (Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Policy", arg0)
	ret0, _ := ret[0].(Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Policy indicates an expected call of Policy.
func (mr *MockApiClientInterfaceMockRecorder) Policy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Policy", reflect.TypeOf((*MockApiClientInterface)(nil).Policy), arg0)
}

// PolicyUpdate mocks base method.
func (m *MockApiClientInterface) PolicyUpdate(arg0 PolicyUpdatePayload) (Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PolicyUpdate", arg0)
	ret0, _ := ret[0].(Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PolicyUpdate indicates an expected call of PolicyUpdate.
func (mr *MockApiClientInterfaceMockRecorder) PolicyUpdate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PolicyUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).PolicyUpdate), arg0)
}

// Project mocks base method.
func (m *MockApiClientInterface) Project(arg0 string) (Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Project", arg0)
	ret0, _ := ret[0].(Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Project indicates an expected call of Project.
func (mr *MockApiClientInterfaceMockRecorder) Project(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Project", reflect.TypeOf((*MockApiClientInterface)(nil).Project), arg0)
}

// ProjectBudget mocks base method.
func (m *MockApiClientInterface) ProjectBudget(arg0 string) (*ProjectBudget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectBudget", arg0)
	ret0, _ := ret[0].(*ProjectBudget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectBudget indicates an expected call of ProjectBudget.
func (mr *MockApiClientInterfaceMockRecorder) ProjectBudget(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectBudget", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectBudget), arg0)
}

// ProjectBudgetDelete mocks base method.
func (m *MockApiClientInterface) ProjectBudgetDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectBudgetDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectBudgetDelete indicates an expected call of ProjectBudgetDelete.
func (mr *MockApiClientInterfaceMockRecorder) ProjectBudgetDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectBudgetDelete", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectBudgetDelete), arg0)
}

// ProjectBudgetUpdate mocks base method.
func (m *MockApiClientInterface) ProjectBudgetUpdate(arg0 string, arg1 *ProjectBudgetUpdatePayload) (*ProjectBudget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectBudgetUpdate", arg0, arg1)
	ret0, _ := ret[0].(*ProjectBudget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectBudgetUpdate indicates an expected call of ProjectBudgetUpdate.
func (mr *MockApiClientInterfaceMockRecorder) ProjectBudgetUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectBudgetUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectBudgetUpdate), arg0, arg1)
}

// ProjectCreate mocks base method.
func (m *MockApiClientInterface) ProjectCreate(arg0 ProjectCreatePayload) (Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectCreate", arg0)
	ret0, _ := ret[0].(Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectCreate indicates an expected call of ProjectCreate.
func (mr *MockApiClientInterfaceMockRecorder) ProjectCreate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectCreate", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectCreate), arg0)
}

// ProjectDelete mocks base method.
func (m *MockApiClientInterface) ProjectDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectDelete indicates an expected call of ProjectDelete.
func (mr *MockApiClientInterfaceMockRecorder) ProjectDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectDelete", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectDelete), arg0)
}

// ProjectEnvironments mocks base method.
func (m *MockApiClientInterface) ProjectEnvironments(arg0 string) ([]Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectEnvironments", arg0)
	ret0, _ := ret[0].([]Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectEnvironments indicates an expected call of ProjectEnvironments.
func (mr *MockApiClientInterfaceMockRecorder) ProjectEnvironments(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectEnvironments", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectEnvironments), arg0)
}

// ProjectMove mocks base method.
func (m *MockApiClientInterface) ProjectMove(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectMove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectMove indicates an expected call of ProjectMove.
func (mr *MockApiClientInterfaceMockRecorder) ProjectMove(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectMove", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectMove), arg0, arg1)
}

// ProjectUpdate mocks base method.
func (m *MockApiClientInterface) ProjectUpdate(arg0 string, arg1 ProjectUpdatePayload) (Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectUpdate", arg0, arg1)
	ret0, _ := ret[0].(Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectUpdate indicates an expected call of ProjectUpdate.
func (mr *MockApiClientInterfaceMockRecorder) ProjectUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectUpdate), arg0, arg1)
}

// Projects mocks base method.
func (m *MockApiClientInterface) Projects() ([]Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Projects")
	ret0, _ := ret[0].([]Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Projects indicates an expected call of Projects.
func (mr *MockApiClientInterfaceMockRecorder) Projects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Projects", reflect.TypeOf((*MockApiClientInterface)(nil).Projects))
}

// ProjectsAgentsAssignments mocks base method.
func (m *MockApiClientInterface) ProjectsAgentsAssignments() (*ProjectsAgentsAssignments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectsAgentsAssignments")
	ret0, _ := ret[0].(*ProjectsAgentsAssignments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectsAgentsAssignments indicates an expected call of ProjectsAgentsAssignments.
func (mr *MockApiClientInterfaceMockRecorder) ProjectsAgentsAssignments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectsAgentsAssignments", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectsAgentsAssignments))
}

// Provider mocks base method.
func (m *MockApiClientInterface) Provider(arg0 string) (*Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provider", arg0)
	ret0, _ := ret[0].(*Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Provider indicates an expected call of Provider.
func (mr *MockApiClientInterfaceMockRecorder) Provider(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provider", reflect.TypeOf((*MockApiClientInterface)(nil).Provider), arg0)
}

// ProviderCreate mocks base method.
func (m *MockApiClientInterface) ProviderCreate(arg0 ProviderCreatePayload) (*Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderCreate", arg0)
	ret0, _ := ret[0].(*Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderCreate indicates an expected call of ProviderCreate.
func (mr *MockApiClientInterfaceMockRecorder) ProviderCreate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderCreate", reflect.TypeOf((*MockApiClientInterface)(nil).ProviderCreate), arg0)
}

// ProviderDelete mocks base method.
func (m *MockApiClientInterface) ProviderDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProviderDelete indicates an expected call of ProviderDelete.
func (mr *MockApiClientInterfaceMockRecorder) ProviderDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderDelete", reflect.TypeOf((*MockApiClientInterface)(nil).ProviderDelete), arg0)
}

// ProviderUpdate mocks base method.
func (m *MockApiClientInterface) ProviderUpdate(arg0 string, arg1 ProviderUpdatePayload) (*Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderUpdate", arg0, arg1)
	ret0, _ := ret[0].(*Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderUpdate indicates an expected call of ProviderUpdate.
func (mr *MockApiClientInterfaceMockRecorder) ProviderUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).ProviderUpdate), arg0, arg1)
}

// Providers mocks base method.
func (m *MockApiClientInterface) Providers() ([]Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Providers")
	ret0, _ := ret[0].([]Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Providers indicates an expected call of Providers.
func (mr *MockApiClientInterfaceMockRecorder) Providers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Providers", reflect.TypeOf((*MockApiClientInterface)(nil).Providers))
}

// PutEnvironmentDiscovery mocks base method.
func (m *MockApiClientInterface) PutEnvironmentDiscovery(arg0 string, arg1 *EnvironmentDiscoveryPutPayload) (*EnvironmentDiscoveryPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEnvironmentDiscovery", arg0, arg1)
	ret0, _ := ret[0].(*EnvironmentDiscoveryPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEnvironmentDiscovery indicates an expected call of PutEnvironmentDiscovery.
func (mr *MockApiClientInterfaceMockRecorder) PutEnvironmentDiscovery(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEnvironmentDiscovery", reflect.TypeOf((*MockApiClientInterface)(nil).PutEnvironmentDiscovery), arg0, arg1)
}

// RemoteStateAccessConfiguration mocks base method.
func (m *MockApiClientInterface) RemoteStateAccessConfiguration(arg0 string) (*RemoteStateAccessConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteStateAccessConfiguration", arg0)
	ret0, _ := ret[0].(*RemoteStateAccessConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteStateAccessConfiguration indicates an expected call of RemoteStateAccessConfiguration.
func (mr *MockApiClientInterfaceMockRecorder) RemoteStateAccessConfiguration(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteStateAccessConfiguration", reflect.TypeOf((*MockApiClientInterface)(nil).RemoteStateAccessConfiguration), arg0)
}

// RemoteStateAccessConfigurationCreate mocks base method.
func (m *MockApiClientInterface) RemoteStateAccessConfigurationCreate(arg0 string, arg1 RemoteStateAccessConfigurationCreate) (*RemoteStateAccessConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteStateAccessConfigurationCreate", arg0, arg1)
	ret0, _ := ret[0].(*RemoteStateAccessConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteStateAccessConfigurationCreate indicates an expected call of RemoteStateAccessConfigurationCreate.
func (mr *MockApiClientInterfaceMockRecorder) RemoteStateAccessConfigurationCreate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteStateAccessConfigurationCreate", reflect.TypeOf((*MockApiClientInterface)(nil).RemoteStateAccessConfigurationCreate), arg0, arg1)
}

// RemoteStateAccessConfigurationDelete mocks base method.
func (m *MockApiClientInterface) RemoteStateAccessConfigurationDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteStateAccessConfigurationDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoteStateAccessConfigurationDelete indicates an expected call of RemoteStateAccessConfigurationDelete.
func (mr *MockApiClientInterfaceMockRecorder) RemoteStateAccessConfigurationDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteStateAccessConfigurationDelete", reflect.TypeOf((*MockApiClientInterface)(nil).RemoteStateAccessConfigurationDelete), arg0)
}

// RemoveCloudCredentialsFromProject mocks base method.
func (m *MockApiClientInterface) RemoveCloudCredentialsFromProject(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCloudCredentialsFromProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCloudCredentialsFromProject indicates an expected call of RemoveCloudCredentialsFromProject.
func (mr *MockApiClientInterfaceMockRecorder) RemoveCloudCredentialsFromProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCloudCredentialsFromProject", reflect.TypeOf((*MockApiClientInterface)(nil).RemoveCloudCredentialsFromProject), arg0, arg1)
}

// RemoveCostCredentialsFromProject mocks base method.
func (m *MockApiClientInterface) RemoveCostCredentialsFromProject(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCostCredentialsFromProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCostCredentialsFromProject indicates an expected call of RemoveCostCredentialsFromProject.
func (mr *MockApiClientInterfaceMockRecorder) RemoveCostCredentialsFromProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCostCredentialsFromProject", reflect.TypeOf((*MockApiClientInterface)(nil).RemoveCostCredentialsFromProject), arg0, arg1)
}

// RemoveTemplateFromProject mocks base method.
func (m *MockApiClientInterface) RemoveTemplateFromProject(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTemplateFromProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTemplateFromProject indicates an expected call of RemoveTemplateFromProject.
func (mr *MockApiClientInterfaceMockRecorder) RemoveTemplateFromProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTemplateFromProject", reflect.TypeOf((*MockApiClientInterface)(nil).RemoveTemplateFromProject), arg0, arg1)
}

// RemoveUserFromProject mocks base method.
func (m *MockApiClientInterface) RemoveUserFromProject(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromProject indicates an expected call of RemoveUserFromProject.
func (mr *MockApiClientInterfaceMockRecorder) RemoveUserFromProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromProject", reflect.TypeOf((*MockApiClientInterface)(nil).RemoveUserFromProject), arg0, arg1)
}

// RemoveUserRoleFromEnvironment mocks base method.
func (m *MockApiClientInterface) RemoveUserRoleFromEnvironment(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserRoleFromEnvironment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserRoleFromEnvironment indicates an expected call of RemoveUserRoleFromEnvironment.
func (mr *MockApiClientInterfaceMockRecorder) RemoveUserRoleFromEnvironment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserRoleFromEnvironment", reflect.TypeOf((*MockApiClientInterface)(nil).RemoveUserRoleFromEnvironment), arg0, arg1)
}

// Role mocks base method.
func (m *MockApiClientInterface) Role(arg0 string) (*Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Role", arg0)
	ret0, _ := ret[0].(*Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Role indicates an expected call of Role.
func (mr *MockApiClientInterfaceMockRecorder) Role(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Role", reflect.TypeOf((*MockApiClientInterface)(nil).Role), arg0)
}

// RoleCreate mocks base method.
func (m *MockApiClientInterface) RoleCreate(arg0 RoleCreatePayload) (*Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleCreate", arg0)
	ret0, _ := ret[0].(*Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleCreate indicates an expected call of RoleCreate.
func (mr *MockApiClientInterfaceMockRecorder) RoleCreate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleCreate", reflect.TypeOf((*MockApiClientInterface)(nil).RoleCreate), arg0)
}

// RoleDelete mocks base method.
func (m *MockApiClientInterface) RoleDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RoleDelete indicates an expected call of RoleDelete.
func (mr *MockApiClientInterfaceMockRecorder) RoleDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleDelete", reflect.TypeOf((*MockApiClientInterface)(nil).RoleDelete), arg0)
}

// RoleUpdate mocks base method.
func (m *MockApiClientInterface) RoleUpdate(arg0 string, arg1 RoleUpdatePayload) (*Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleUpdate", arg0, arg1)
	ret0, _ := ret[0].(*Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleUpdate indicates an expected call of RoleUpdate.
func (mr *MockApiClientInterfaceMockRecorder) RoleUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).RoleUpdate), arg0, arg1)
}

// Roles mocks base method.
func (m *MockApiClientInterface) Roles() ([]Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roles")
	ret0, _ := ret[0].([]Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Roles indicates an expected call of Roles.
func (mr *MockApiClientInterfaceMockRecorder) Roles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roles", reflect.TypeOf((*MockApiClientInterface)(nil).Roles))
}

// SshKeyCreate mocks base method.
func (m *MockApiClientInterface) SshKeyCreate(arg0 SshKeyCreatePayload) (*SshKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeyCreate", arg0)
	ret0, _ := ret[0].(*SshKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SshKeyCreate indicates an expected call of SshKeyCreate.
func (mr *MockApiClientInterfaceMockRecorder) SshKeyCreate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeyCreate", reflect.TypeOf((*MockApiClientInterface)(nil).SshKeyCreate), arg0)
}

// SshKeyDelete mocks base method.
func (m *MockApiClientInterface) SshKeyDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeyDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SshKeyDelete indicates an expected call of SshKeyDelete.
func (mr *MockApiClientInterfaceMockRecorder) SshKeyDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeyDelete", reflect.TypeOf((*MockApiClientInterface)(nil).SshKeyDelete), arg0)
}

// SshKeyUpdate mocks base method.
func (m *MockApiClientInterface) SshKeyUpdate(arg0 string, arg1 *SshKeyUpdatePayload) (*SshKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeyUpdate", arg0, arg1)
	ret0, _ := ret[0].(*SshKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SshKeyUpdate indicates an expected call of SshKeyUpdate.
func (mr *MockApiClientInterfaceMockRecorder) SshKeyUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeyUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).SshKeyUpdate), arg0, arg1)
}

// SshKeys mocks base method.
func (m *MockApiClientInterface) SshKeys() ([]SshKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeys")
	ret0, _ := ret[0].([]SshKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SshKeys indicates an expected call of SshKeys.
func (mr *MockApiClientInterfaceMockRecorder) SshKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeys", reflect.TypeOf((*MockApiClientInterface)(nil).SshKeys))
}

// SubscribeWorkflowTrigger mocks base method.
func (m *MockApiClientInterface) SubscribeWorkflowTrigger(arg0 string, arg1 WorkflowTriggerEnvironments) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeWorkflowTrigger", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeWorkflowTrigger indicates an expected call of SubscribeWorkflowTrigger.
func (mr *MockApiClientInterfaceMockRecorder) SubscribeWorkflowTrigger(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeWorkflowTrigger", reflect.TypeOf((*MockApiClientInterface)(nil).SubscribeWorkflowTrigger), arg0, arg1)
}

// Team mocks base method.
func (m *MockApiClientInterface) Team(arg0 string) (Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Team", arg0)
	ret0, _ := ret[0].(Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Team indicates an expected call of Team.
func (mr *MockApiClientInterfaceMockRecorder) Team(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Team", reflect.TypeOf((*MockApiClientInterface)(nil).Team), arg0)
}

// TeamCreate mocks base method.
func (m *MockApiClientInterface) TeamCreate(arg0 TeamCreatePayload) (Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamCreate", arg0)
	ret0, _ := ret[0].(Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamCreate indicates an expected call of TeamCreate.
func (mr *MockApiClientInterfaceMockRecorder) TeamCreate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamCreate", reflect.TypeOf((*MockApiClientInterface)(nil).TeamCreate), arg0)
}

// TeamDelete mocks base method.
func (m *MockApiClientInterface) TeamDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TeamDelete indicates an expected call of TeamDelete.
func (mr *MockApiClientInterfaceMockRecorder) TeamDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamDelete", reflect.TypeOf((*MockApiClientInterface)(nil).TeamDelete), arg0)
}

// TeamRoleAssignmentCreateOrUpdate mocks base method.
func (m *MockApiClientInterface) TeamRoleAssignmentCreateOrUpdate(arg0 *TeamRoleAssignmentCreateOrUpdatePayload) (*TeamRoleAssignmentPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamRoleAssignmentCreateOrUpdate", arg0)
	ret0, _ := ret[0].(*TeamRoleAssignmentPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamRoleAssignmentCreateOrUpdate indicates an expected call of TeamRoleAssignmentCreateOrUpdate.
func (mr *MockApiClientInterfaceMockRecorder) TeamRoleAssignmentCreateOrUpdate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamRoleAssignmentCreateOrUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).TeamRoleAssignmentCreateOrUpdate), arg0)
}

// TeamRoleAssignmentDelete mocks base method.
func (m *MockApiClientInterface) TeamRoleAssignmentDelete(arg0 *TeamRoleAssignmentDeletePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamRoleAssignmentDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TeamRoleAssignmentDelete indicates an expected call of TeamRoleAssignmentDelete.
func (mr *MockApiClientInterfaceMockRecorder) TeamRoleAssignmentDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamRoleAssignmentDelete", reflect.TypeOf((*MockApiClientInterface)(nil).TeamRoleAssignmentDelete), arg0)
}

// TeamRoleAssignments mocks base method.
func (m *MockApiClientInterface) TeamRoleAssignments(arg0 *TeamRoleAssignmentListPayload) ([]TeamRoleAssignmentPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamRoleAssignments", arg0)
	ret0, _ := ret[0].([]TeamRoleAssignmentPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamRoleAssignments indicates an expected call of TeamRoleAssignments.
func (mr *MockApiClientInterfaceMockRecorder) TeamRoleAssignments(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamRoleAssignments", reflect.TypeOf((*MockApiClientInterface)(nil).TeamRoleAssignments), arg0)
}

// TeamUpdate mocks base method.
func (m *MockApiClientInterface) TeamUpdate(arg0 string, arg1 TeamUpdatePayload) (Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamUpdate", arg0, arg1)
	ret0, _ := ret[0].(Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamUpdate indicates an expected call of TeamUpdate.
func (mr *MockApiClientInterfaceMockRecorder) TeamUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).TeamUpdate), arg0, arg1)
}

// Teams mocks base method.
func (m *MockApiClientInterface) Teams() ([]Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teams")
	ret0, _ := ret[0].([]Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Teams indicates an expected call of Teams.
func (mr *MockApiClientInterfaceMockRecorder) Teams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teams", reflect.TypeOf((*MockApiClientInterface)(nil).Teams))
}

// TeamsByName mocks base method.
func (m *MockApiClientInterface) TeamsByName(arg0 string) ([]Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamsByName", arg0)
	ret0, _ := ret[0].([]Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamsByName indicates an expected call of TeamsByName.
func (mr *MockApiClientInterfaceMockRecorder) TeamsByName(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamsByName", reflect.TypeOf((*MockApiClientInterface)(nil).TeamsByName), arg0)
}

// Template mocks base method.
func (m *MockApiClientInterface) Template(arg0 string) (Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Template", arg0)
	ret0, _ := ret[0].(Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Template indicates an expected call of Template.
func (mr *MockApiClientInterfaceMockRecorder) Template(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Template", reflect.TypeOf((*MockApiClientInterface)(nil).Template), arg0)
}

// TemplateCreate mocks base method.
func (m *MockApiClientInterface) TemplateCreate(arg0 TemplateCreatePayload) (Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateCreate", arg0)
	ret0, _ := ret[0].(Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateCreate indicates an expected call of TemplateCreate.
func (mr *MockApiClientInterfaceMockRecorder) TemplateCreate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateCreate", reflect.TypeOf((*MockApiClientInterface)(nil).TemplateCreate), arg0)
}

// TemplateDelete mocks base method.
func (m *MockApiClientInterface) TemplateDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TemplateDelete indicates an expected call of TemplateDelete.
func (mr *MockApiClientInterfaceMockRecorder) TemplateDelete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateDelete", reflect.TypeOf((*MockApiClientInterface)(nil).TemplateDelete), arg0)
}

// TemplateUpdate mocks base method.
func (m *MockApiClientInterface) TemplateUpdate(arg0 string, arg1 TemplateCreatePayload) (Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateUpdate", arg0, arg1)
	ret0, _ := ret[0].(Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateUpdate indicates an expected call of TemplateUpdate.
func (mr *MockApiClientInterfaceMockRecorder) TemplateUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).TemplateUpdate), arg0, arg1)
}

// Templates mocks base method.
func (m *MockApiClientInterface) Templates() ([]Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Templates")
	ret0, _ := ret[0].([]Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Templates indicates an expected call of Templates.
func (mr *MockApiClientInterfaceMockRecorder) Templates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Templates", reflect.TypeOf((*MockApiClientInterface)(nil).Templates))
}

// UnassignConfigurationSets mocks base method.
func (m *MockApiClientInterface) UnassignConfigurationSets(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignConfigurationSets", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignConfigurationSets indicates an expected call of UnassignConfigurationSets.
func (mr *MockApiClientInterfaceMockRecorder) UnassignConfigurationSets(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignConfigurationSets", reflect.TypeOf((*MockApiClientInterface)(nil).UnassignConfigurationSets), arg0, arg1, arg2)
}

// UnsubscribeWorkflowTrigger mocks base method.
func (m *MockApiClientInterface) UnsubscribeWorkflowTrigger(arg0 string, arg1 WorkflowTriggerEnvironments) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubscribeWorkflowTrigger", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsubscribeWorkflowTrigger indicates an expected call of UnsubscribeWorkflowTrigger.
func (mr *MockApiClientInterfaceMockRecorder) UnsubscribeWorkflowTrigger(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeWorkflowTrigger", reflect.TypeOf((*MockApiClientInterface)(nil).UnsubscribeWorkflowTrigger), arg0, arg1)
}

// UpdateUserProjectAssignment mocks base method.
func (m *MockApiClientInterface) UpdateUserProjectAssignment(arg0, arg1 string, arg2 *UpdateUserProjectAssignmentPayload) (*UserProjectAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProjectAssignment", arg0, arg1, arg2)
	ret0, _ := ret[0].(*UserProjectAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserProjectAssignment indicates an expected call of UpdateUserProjectAssignment.
func (mr *MockApiClientInterfaceMockRecorder) UpdateUserProjectAssignment(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProjectAssignment", reflect.TypeOf((*MockApiClientInterface)(nil).UpdateUserProjectAssignment), arg0, arg1, arg2)
}

// UserProjectAssignments mocks base method.
func (m *MockApiClientInterface) UserProjectAssignments(arg0 string) ([]UserProjectAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserProjectAssignments", arg0)
	ret0, _ := ret[0].([]UserProjectAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserProjectAssignments indicates an expected call of UserProjectAssignments.
func (mr *MockApiClientInterfaceMockRecorder) UserProjectAssignments(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserProjectAssignments", reflect.TypeOf((*MockApiClientInterface)(nil).UserProjectAssignments), arg0)
}

// UserRoleEnvironmentAssignments mocks base method.
func (m *MockApiClientInterface) UserRoleEnvironmentAssignments(arg0 string) ([]UserRoleEnvironmentAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRoleEnvironmentAssignments", arg0)
	ret0, _ := ret[0].([]UserRoleEnvironmentAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRoleEnvironmentAssignments indicates an expected call of UserRoleEnvironmentAssignments.
func (mr *MockApiClientInterfaceMockRecorder) UserRoleEnvironmentAssignments(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRoleEnvironmentAssignments", reflect.TypeOf((*MockApiClientInterface)(nil).UserRoleEnvironmentAssignments), arg0)
}

// Users mocks base method.
func (m *MockApiClientInterface) Users() ([]OrganizationUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].([]OrganizationUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Users indicates an expected call of Users.
func (mr *MockApiClientInterfaceMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockApiClientInterface)(nil).Users))
}

// VariablesFromRepository mocks base method.
func (m *MockApiClientInterface) VariablesFromRepository(arg0 *VariablesFromRepositoryPayload) ([]ConfigurationVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VariablesFromRepository", arg0)
	ret0, _ := ret[0].([]ConfigurationVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VariablesFromRepository indicates an expected call of VariablesFromRepository.
func (mr *MockApiClientInterfaceMockRecorder) VariablesFromRepository(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariablesFromRepository", reflect.TypeOf((*MockApiClientInterface)(nil).VariablesFromRepository), arg0)
}

// WorkflowTrigger mocks base method.
func (m *MockApiClientInterface) WorkflowTrigger(arg0 string) ([]WorkflowTrigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowTrigger", arg0)
	ret0, _ := ret[0].([]WorkflowTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowTrigger indicates an expected call of WorkflowTrigger.
func (mr *MockApiClientInterfaceMockRecorder) WorkflowTrigger(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowTrigger", reflect.TypeOf((*MockApiClientInterface)(nil).WorkflowTrigger), arg0)
}

// WorkflowTriggerUpsert mocks base method.
func (m *MockApiClientInterface) WorkflowTriggerUpsert(arg0 string, arg1 WorkflowTriggerUpsertPayload) ([]WorkflowTrigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowTriggerUpsert", arg0, arg1)
	ret0, _ := ret[0].([]WorkflowTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowTriggerUpsert indicates an expected call of WorkflowTriggerUpsert.
func (mr *MockApiClientInterfaceMockRecorder) WorkflowTriggerUpsert(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowTriggerUpsert", reflect.TypeOf((*MockApiClientInterface)(nil).WorkflowTriggerUpsert), arg0, arg1)
}
