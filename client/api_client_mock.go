// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/env0/terraform-provider-env0/client (interfaces: ApiClientInterface)

// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockApiClientInterface is a mock of ApiClientInterface interface.
type MockApiClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockApiClientInterfaceMockRecorder
}

// MockApiClientInterfaceMockRecorder is the mock recorder for MockApiClientInterface.
type MockApiClientInterfaceMockRecorder struct {
	mock *MockApiClientInterface
}

// NewMockApiClientInterface creates a new mock instance.
func NewMockApiClientInterface(ctrl *gomock.Controller) *MockApiClientInterface {
	mock := &MockApiClientInterface{ctrl: ctrl}
	mock.recorder = &MockApiClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiClientInterface) EXPECT() *MockApiClientInterfaceMockRecorder {
	return m.recorder
}

// AssignTemplateToProject mocks base method.
func (m *MockApiClientInterface) AssignTemplateToProject(arg0 string, arg1 TemplateAssignmentToProjectPayload) (Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignTemplateToProject", arg0, arg1)
	ret0, _ := ret[0].(Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignTemplateToProject indicates an expected call of AssignTemplateToProject.
func (mr *MockApiClientInterfaceMockRecorder) AssignTemplateToProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignTemplateToProject", reflect.TypeOf((*MockApiClientInterface)(nil).AssignTemplateToProject), arg0, arg1)
}

// AwsCredentials mocks base method.
func (m *MockApiClientInterface) AwsCredentials(arg0 string) (ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AwsCredentials", arg0)
	ret0, _ := ret[0].(ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AwsCredentials indicates an expected call of AwsCredentials.
func (mr *MockApiClientInterfaceMockRecorder) AwsCredentials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AwsCredentials", reflect.TypeOf((*MockApiClientInterface)(nil).AwsCredentials), arg0)
}

// AwsCredentialsCreate mocks base method.
func (m *MockApiClientInterface) AwsCredentialsCreate(arg0 AwsCredentialsCreatePayload) (ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AwsCredentialsCreate", arg0)
	ret0, _ := ret[0].(ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AwsCredentialsCreate indicates an expected call of AwsCredentialsCreate.
func (mr *MockApiClientInterfaceMockRecorder) AwsCredentialsCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AwsCredentialsCreate", reflect.TypeOf((*MockApiClientInterface)(nil).AwsCredentialsCreate), arg0)
}

// AwsCredentialsDelete mocks base method.
func (m *MockApiClientInterface) AwsCredentialsDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AwsCredentialsDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AwsCredentialsDelete indicates an expected call of AwsCredentialsDelete.
func (mr *MockApiClientInterfaceMockRecorder) AwsCredentialsDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AwsCredentialsDelete", reflect.TypeOf((*MockApiClientInterface)(nil).AwsCredentialsDelete), arg0)
}

// AwsCredentialsList mocks base method.
func (m *MockApiClientInterface) AwsCredentialsList() ([]ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AwsCredentialsList")
	ret0, _ := ret[0].([]ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AwsCredentialsList indicates an expected call of AwsCredentialsList.
func (mr *MockApiClientInterfaceMockRecorder) AwsCredentialsList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AwsCredentialsList", reflect.TypeOf((*MockApiClientInterface)(nil).AwsCredentialsList))
}

// ConfigurationVariableCreate mocks base method.
func (m *MockApiClientInterface) ConfigurationVariableCreate(arg0, arg1 string, arg2 bool, arg3 Scope, arg4 string, arg5 ConfigurationVariableType, arg6 []string) (ConfigurationVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationVariableCreate", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(ConfigurationVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationVariableCreate indicates an expected call of ConfigurationVariableCreate.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationVariableCreate(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationVariableCreate", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationVariableCreate), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ConfigurationVariableDelete mocks base method.
func (m *MockApiClientInterface) ConfigurationVariableDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationVariableDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigurationVariableDelete indicates an expected call of ConfigurationVariableDelete.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationVariableDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationVariableDelete", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationVariableDelete), arg0)
}

// ConfigurationVariableUpdate mocks base method.
func (m *MockApiClientInterface) ConfigurationVariableUpdate(arg0, arg1, arg2 string, arg3 bool, arg4 Scope, arg5 string, arg6 ConfigurationVariableType, arg7 []string) (ConfigurationVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationVariableUpdate", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(ConfigurationVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationVariableUpdate indicates an expected call of ConfigurationVariableUpdate.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationVariableUpdate(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationVariableUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationVariableUpdate), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// ConfigurationVariables mocks base method.
func (m *MockApiClientInterface) ConfigurationVariables(arg0 Scope, arg1 string) ([]ConfigurationVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigurationVariables", arg0, arg1)
	ret0, _ := ret[0].([]ConfigurationVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurationVariables indicates an expected call of ConfigurationVariables.
func (mr *MockApiClientInterfaceMockRecorder) ConfigurationVariables(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationVariables", reflect.TypeOf((*MockApiClientInterface)(nil).ConfigurationVariables), arg0, arg1)
}

// Organization mocks base method.
func (m *MockApiClientInterface) Organization() (Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Organization")
	ret0, _ := ret[0].(Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Organization indicates an expected call of Organization.
func (mr *MockApiClientInterfaceMockRecorder) Organization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Organization", reflect.TypeOf((*MockApiClientInterface)(nil).Organization))
}

// Project mocks base method.
func (m *MockApiClientInterface) Project(arg0 string) (Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Project", arg0)
	ret0, _ := ret[0].(Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Project indicates an expected call of Project.
func (mr *MockApiClientInterfaceMockRecorder) Project(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Project", reflect.TypeOf((*MockApiClientInterface)(nil).Project), arg0)
}

// ProjectCreate mocks base method.
func (m *MockApiClientInterface) ProjectCreate(arg0, arg1 string) (Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectCreate", arg0, arg1)
	ret0, _ := ret[0].(Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectCreate indicates an expected call of ProjectCreate.
func (mr *MockApiClientInterfaceMockRecorder) ProjectCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectCreate", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectCreate), arg0, arg1)
}

// ProjectDelete mocks base method.
func (m *MockApiClientInterface) ProjectDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProjectDelete indicates an expected call of ProjectDelete.
func (mr *MockApiClientInterfaceMockRecorder) ProjectDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectDelete", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectDelete), arg0)
}

// ProjectUpdate mocks base method.
func (m *MockApiClientInterface) ProjectUpdate(arg0 string, arg1 UpdateProjectPayload) (Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectUpdate", arg0, arg1)
	ret0, _ := ret[0].(Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectUpdate indicates an expected call of ProjectUpdate.
func (mr *MockApiClientInterfaceMockRecorder) ProjectUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).ProjectUpdate), arg0, arg1)
}

// Projects mocks base method.
func (m *MockApiClientInterface) Projects() ([]Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Projects")
	ret0, _ := ret[0].([]Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Projects indicates an expected call of Projects.
func (mr *MockApiClientInterfaceMockRecorder) Projects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Projects", reflect.TypeOf((*MockApiClientInterface)(nil).Projects))
}

// RemoveTemplateFromProject mocks base method.
func (m *MockApiClientInterface) RemoveTemplateFromProject(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTemplateFromProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTemplateFromProject indicates an expected call of RemoveTemplateFromProject.
func (mr *MockApiClientInterfaceMockRecorder) RemoveTemplateFromProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTemplateFromProject", reflect.TypeOf((*MockApiClientInterface)(nil).RemoveTemplateFromProject), arg0, arg1)
}

// SshKeyCreate mocks base method.
func (m *MockApiClientInterface) SshKeyCreate(arg0 SshKeyCreatePayload) (SshKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeyCreate", arg0)
	ret0, _ := ret[0].(SshKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SshKeyCreate indicates an expected call of SshKeyCreate.
func (mr *MockApiClientInterfaceMockRecorder) SshKeyCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeyCreate", reflect.TypeOf((*MockApiClientInterface)(nil).SshKeyCreate), arg0)
}

// SshKeyDelete mocks base method.
func (m *MockApiClientInterface) SshKeyDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeyDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SshKeyDelete indicates an expected call of SshKeyDelete.
func (mr *MockApiClientInterfaceMockRecorder) SshKeyDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeyDelete", reflect.TypeOf((*MockApiClientInterface)(nil).SshKeyDelete), arg0)
}

// SshKeys mocks base method.
func (m *MockApiClientInterface) SshKeys() ([]SshKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SshKeys")
	ret0, _ := ret[0].([]SshKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SshKeys indicates an expected call of SshKeys.
func (mr *MockApiClientInterfaceMockRecorder) SshKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SshKeys", reflect.TypeOf((*MockApiClientInterface)(nil).SshKeys))
}

// Template mocks base method.
func (m *MockApiClientInterface) Template(arg0 string) (Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Template", arg0)
	ret0, _ := ret[0].(Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Template indicates an expected call of Template.
func (mr *MockApiClientInterfaceMockRecorder) Template(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Template", reflect.TypeOf((*MockApiClientInterface)(nil).Template), arg0)
}

// TemplateCreate mocks base method.
func (m *MockApiClientInterface) TemplateCreate(arg0 TemplateCreatePayload) (Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateCreate", arg0)
	ret0, _ := ret[0].(Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateCreate indicates an expected call of TemplateCreate.
func (mr *MockApiClientInterfaceMockRecorder) TemplateCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateCreate", reflect.TypeOf((*MockApiClientInterface)(nil).TemplateCreate), arg0)
}

// TemplateDelete mocks base method.
func (m *MockApiClientInterface) TemplateDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TemplateDelete indicates an expected call of TemplateDelete.
func (mr *MockApiClientInterfaceMockRecorder) TemplateDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateDelete", reflect.TypeOf((*MockApiClientInterface)(nil).TemplateDelete), arg0)
}

// TemplateUpdate mocks base method.
func (m *MockApiClientInterface) TemplateUpdate(arg0 string, arg1 TemplateCreatePayload) (Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateUpdate", arg0, arg1)
	ret0, _ := ret[0].(Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplateUpdate indicates an expected call of TemplateUpdate.
func (mr *MockApiClientInterfaceMockRecorder) TemplateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateUpdate", reflect.TypeOf((*MockApiClientInterface)(nil).TemplateUpdate), arg0, arg1)
}

// Templates mocks base method.
func (m *MockApiClientInterface) Templates() ([]Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Templates")
	ret0, _ := ret[0].([]Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Templates indicates an expected call of Templates.
func (mr *MockApiClientInterfaceMockRecorder) Templates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Templates", reflect.TypeOf((*MockApiClientInterface)(nil).Templates))
}

// organizationId mocks base method.
func (m *MockApiClientInterface) organizationId() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "organizationId")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// organizationId indicates an expected call of organizationId.
func (mr *MockApiClientInterfaceMockRecorder) organizationId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "organizationId", reflect.TypeOf((*MockApiClientInterface)(nil).organizationId))
}
